"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[40588],{28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>p});var n=s(96540);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}},57036:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api/entities/types/type-aliases/InputStatType","title":"Type Alias: InputStatType","description":"InputStatType = \\\\{ type StatClaimIssuer; type: ScopedCount \\\\| ScopedBalance; \\\\}","source":"@site/sdk-docs_versioned_docs/version-v29.0.x/api/entities/types/type-aliases/InputStatType.mdx","sourceDirName":"api/entities/types/type-aliases","slug":"/api/entities/types/type-aliases/InputStatType","permalink":"/polymesh-documentation-site/sdk-docs/api/entities/types/type-aliases/InputStatType","draft":false,"unlisted":false,"tags":[],"version":"v29.0.x","frontMatter":{"sidebar_label":"InputStatType"},"sidebar":"defaultSidebar","previous":{"title":"InputStatClaim","permalink":"/polymesh-documentation-site/sdk-docs/api/entities/types/type-aliases/InputStatClaim"},"next":{"title":"InputTrustedClaimIssuer","permalink":"/polymesh-documentation-site/sdk-docs/api/entities/types/type-aliases/InputTrustedClaimIssuer"}}');var i=s(74848),a=s(28453);const o={sidebar_label:"InputStatType"},p="Type Alias: InputStatType",c={},d=[];function r(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"type-alias-inputstattype",children:"Type Alias: InputStatType"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"InputStatType"})," = { ",(0,i.jsx)(t.code,{children:"type"}),": ",(0,i.jsx)(t.a,{href:"/polymesh-documentation-site/sdk-docs/api/entities/types/enumerations/StatType#count",children:(0,i.jsx)(t.code,{children:"Count"})})," | ",(0,i.jsx)(t.a,{href:"/polymesh-documentation-site/sdk-docs/api/entities/types/enumerations/StatType#balance",children:(0,i.jsx)(t.code,{children:"Balance"})}),"; } | { ",(0,i.jsx)(t.code,{children:"claimIssuer"}),": ",(0,i.jsx)(t.a,{href:"/polymesh-documentation-site/sdk-docs/api/entities/types/interfaces/StatClaimIssuer",children:(0,i.jsx)(t.code,{children:"StatClaimIssuer"})}),"; ",(0,i.jsx)(t.code,{children:"type"}),": ",(0,i.jsx)(t.a,{href:"/polymesh-documentation-site/sdk-docs/api/entities/types/enumerations/StatType#scopedcount",children:(0,i.jsx)(t.code,{children:"ScopedCount"})})," | ",(0,i.jsx)(t.a,{href:"/polymesh-documentation-site/sdk-docs/api/entities/types/enumerations/StatType#scopedbalance",children:(0,i.jsx)(t.code,{children:"ScopedBalance"})}),"; }"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Defined in: ",(0,i.jsx)(t.a,{href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/bee6a2fe7a8ce5db42a6982e793782182cde2153/src/api/entities/types.ts#L275",children:"src/api/entities/types.ts:275"})]})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}}}]);