"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[79929],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>m});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=n.createContext({}),d=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(a),h=i,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||o;return a?n.createElement(m,r(r({ref:t},l),{},{components:a})):n.createElement(m,r({ref:t},l))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},34329:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=a(87462),i=(a(67294),a(3905));const o={sidebar_position:6,title:"CDD with the SDK",description:"Provide customer due diligence with the Polymesh SDK",slug:"/kyc/cdd-sdk/"},r=void 0,s={unversionedId:"kyc/cdd-sdk",id:"kyc/cdd-sdk",title:"CDD with the SDK",description:"Provide customer due diligence with the Polymesh SDK",source:"@site/docs/07-kyc/cdd-sdk.mdx",sourceDirName:"07-kyc",slug:"/kyc/cdd-sdk/",permalink:"/polymesh-documentation-site/docs/kyc/cdd-sdk/",draft:!1,editUrl:"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/07-kyc/cdd-sdk.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"CDD with the SDK",description:"Provide customer due diligence with the Polymesh SDK",slug:"/kyc/cdd-sdk/"},sidebar:"defaultSidebar",previous:{title:"KYC Example App",permalink:"/polymesh-documentation-site/docs/kyc/example-app/"},next:{title:"Useful Links",permalink:"/polymesh-documentation-site/docs/resources/github-repositories/"}},c={},d=[{value:"How to create a new account",id:"how-to-create-a-new-account",level:2},{value:"Information collection",id:"information-collection",level:3},{value:"Create the account",id:"create-the-account",level:3},{value:"The CDD attestation",id:"the-cdd-attestation",level:2},{value:"Prepare your code",id:"prepare-your-code",level:3},{value:"Calculate off-chain",id:"calculate-off-chain",level:3},{value:"Publish the CDD attestation",id:"publish-the-cdd-attestation",level:3},{value:"Transact in ACME",id:"transact-in-acme",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Links",id:"links",level:2}],l=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},u=l("Tabs"),p=l("TabItem"),h={toc:d};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You ought to look at the previous chapter on ",(0,i.kt)("em",{parentName:"p"},"KYC with the SDK")," first.")),(0,i.kt)("p",null,"Although, a CDD service provider is a privileged KYC service provider, adding a CDD claim is an entirely different proposition. A CDD service provider has access to the Polymesh Unique Identity System (PUIS) and is entrusted with publishing cryptographic commitments."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/introduction/identity/"},"introduction on identity")," for a refresher.")),(0,i.kt)("p",null,"In particular:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"For ",(0,i.kt)("strong",{parentName:"li"},"brand new users")," of Polymesh, the CDD provider needs to:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Record a new entry in the PUIS, and return to the user their unique off-chain identifier, or ",(0,i.kt)("strong",{parentName:"li"},"uID"),";"),(0,i.kt)("li",{parentName:"ol"},"Create a new account controlled by the primary key asked by the user, and return the ",(0,i.kt)("strong",{parentName:"li"},"Did")," to the user;"))),(0,i.kt)("li",{parentName:"ol"},"For ",(0,i.kt)("strong",{parentName:"li"},"existing users")," that need a new CDD attestation, the CDD provider needs to ask or retrieve the user's uID in the PUIS;"),(0,i.kt)("li",{parentName:"ol"},"When the CDD service provider publishes a CDD attestation associated with an account, the attached ",(0,i.kt)("strong",{parentName:"li"},"CddId")," needs to be cryptographically calculated using the user's uID and the account's DID. This is needed so that an account can later on self-publish an investor uniqueness claim.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/distribute/with-sdk/"},"distribute with the SDK")," for a reminder of the process.")),(0,i.kt)("p",null,"We assume the CDD service provider is named EzCdd and has a way to instantiate a Polymesh client."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const signingManagerEzCdd: LocalSigningManager =\n  await LocalSigningManager.create({\n    accounts: [\n      {\n        mnemonic: 'word51 word52 ...',\n      },\n    ],\n  });\n\nconst apiEzCdd: Polymesh = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerEzCdd,\n});\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const signingManagerEzCdd = await LocalSigningManager.create({\n  accounts: [\n    {\n      mnemonic: 'word51 word52 ...',\n    },\n  ],\n});\n\nconst apiEzCdd = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerEzCdd,\n});\n")))),(0,i.kt)("h2",{id:"how-to-create-a-new-account"},"How to create a new account"),(0,i.kt)("p",null,"This part only applies if the user, say Bob, is brand new to Polymesh, or if Bob wants to create another account for himself."),(0,i.kt)("p",null,"In that case, the CDD provider needs to create an account. This is a privileged operation, too, one that only a CDD service provider can accomplish. The CDD provider needs to ask Bob for the public key, or address, he wishes to associate with the account."),(0,i.kt)("h3",{id:"information-collection"},"Information collection"),(0,i.kt)("p",null,"Bob creates a private key and returns the computed address. For instance:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const bobAddress: string = '5ED27JHWh9dPVnhvRfazMRNqrfMgcAUdvgD7hs3969PBuxqe'; // For instance\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const bobAddress = '5ED27JHWh9dPVnhvRfazMRNqrfMgcAUdvgD7hs3969PBuxqe'; // For instance\n")))),(0,i.kt)("p",null,"The provider needs to confirm that this key is not yet assigned to any other account."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const bobKeyInfo: Account = apiEzCdd.accountManagement.getAccount({\n  address: bobAddress,\n});\nconst bob: Identity = await bobKeyInfo.getIdentity();\nassert(bob === null);\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const bobKeyInfo = apiEzCdd.accountManagement.getAccount({\n  address: bobAddress,\n});\nconst bob = await bobKeyInfo.getIdentity();\nassert(bob === null);\n")))),(0,i.kt)("h3",{id:"create-the-account"},"Create the account"),(0,i.kt)("p",null,"With the certainty that ",(0,i.kt)("strong",{parentName:"p"},"the key is not associated with any existing account"),", it is time to create a new account with this key:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const newAccountQueue: TransactionQueue<Identity> =\n  await apiEzCdd.identities.registerIdentity({\n    targetAccount: bobAddress,\n  });\nconst bob: Identity = await newAccountQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const newAccountQueue = await apiEzCdd.identities.registerIdentity({\n  targetAccount: bobAddress,\n});\nconst bob = await newAccountQueue.run();\n")))),(0,i.kt)("p",null,"So does Bob have a new account on-chain? Not yet, sadly. Or rather, fortunately. You see, it is worth repeating that all actions of consequence need approval on both ends, and this is no different here. Bob needs to use his private key to approve having it associated with this new account."),(0,i.kt)("p",null,"So, either Bob goes to his dashboard, and looks for incoming authorisation requests, or Bob fires up his own ",(0,i.kt)("inlineCode",{parentName:"p"},"apiBob")," and uses the SDK. We assume that EzCdd gave him their ",(0,i.kt)("inlineCode",{parentName:"p"},"const ezCddDid: string"),"."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const bobAccount: Account = apiBob.accountManagement.getSigningAccount();\nconst pendingAuthorizations: AuthorizationRequest[] =\n  await bobAccount.authorizations.getReceived();\nconst ezCddAuthorization: AuthorizationRequest = pendingAuthorizations.find(\n  (pendingAuthorization: AuthorizationRequest) => {\n    return pendingAuthorization.issuer.did === ezCddDid;\n  }\n);\nconst acceptQueue: TransactionQueue<void> = await ezCddAuthorization.accept();\nawait acceptQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const bobAccount = apiBob.accountManagement.getSigningAccount();\nconst pendingAuthorizations = await bobAccount.authorizations.getReceived();\nconst ezCddAuthorization = pendingAuthorizations.find(\n  (pendingAuthorization) => {\n    return pendingAuthorization.issuer.did === ezCddDid;\n  }\n);\nconst acceptQueue = await ezCddAuthorization.accept();\nawait acceptQueue.run();\n")))),(0,i.kt)("p",null,"There is only a ",(0,i.kt)("em",{parentName:"p"},"slight problem")," with the above. Bob has not yet received his CDD attestation, and therefore cannot publish a transaction to the Polymesh network. So we showed the above to ",(0,i.kt)("em",{parentName:"p"},"stay in context"),", but really, Bob has to wait for the below CDD attestation to be published before he can approve, or reject, the account association."),(0,i.kt)("p",null,"Additionally, the address needs some POLYX to pay for transaction fees. Bob can get that by using the POLY to POLYX bridge, or he can have an agreement with EzCdd to send some to his address. Once again, only after the CDD attestation has been published."),(0,i.kt)("h2",{id:"the-cdd-attestation"},"The CDD attestation"),(0,i.kt)("p",null,"Now that Bob has an account on Polymesh, the CDD provider needs to add a CDD attestation to the account. To calculate the cryptographic CddId to include in the attestation, we are going to inspire ourselves from this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/CDD-Scripts/blob/83ff952ab88b0aeaeaaed9cda35556dc1cc79f74/index.js#L72-L77"},"example script"),". Let's first clearly identify what is off-chain and what is on-chain:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Off-chain:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"investor's uID, which is Bob's, unique identifier in the PUIS system, and"),(0,i.kt)("li",{parentName:"ul"},"CDD service provider's private key, obviously."))),(0,i.kt)("li",{parentName:"ul"},"On-chain:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bob.did"),": the account number the CDD provider created to identify (one of) Bob's account on-chain,"),(0,i.kt)("li",{parentName:"ul"},"CddId: the identifier the CDD provider will publish after Bob has completed the CDD process, and"),(0,i.kt)("li",{parentName:"ul"},"CDD service provider's address, or primary public key for the service provider's account.")))),(0,i.kt)("p",null,"The difficulty here is how to actually calculate the CddId."),(0,i.kt)("h3",{id:"prepare-your-code"},"Prepare your code"),(0,i.kt)("p",null,"We need to do some extra work because, at its base, the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/cryptography/tree/afed507/confidential-identity"},"confidential identity")," library is coded in Rust, like the rest of Polymesh's codebase, and compiled in WebAssembly (WASM), for use in NodeJs. So go ahead:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Copy the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/PolymeshAssociation/CDD-Scripts/tree/83ff952ab88b0aeaeaaed9cda35556dc1cc79f74/pkg"},"whole library folder"),". This includes the external declarations for NodeJs;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/PolymeshAssociation/CDD-Scripts/blob/83ff952ab88b0aeaeaaed9cda35556dc1cc79f74/index.js#L10"},"Import it")," in your file;"),(0,i.kt)("li",{parentName:"ul"},"And also ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/PolymeshAssociation/CDD-Scripts/blob/83ff952ab88b0aeaeaaed9cda35556dc1cc79f74/index.js#L11"},"import some Polkadot utilities"),".")),(0,i.kt)("h3",{id:"calculate-off-chain"},"Calculate off-chain"),(0,i.kt)("p",null,"Bob already has his uID, it was either retrieved from the PUIS by the CDD provider, or saved on file or in the Polymesh Wallet at the time of his first CDD. Either way, the CDD service provider obtained it:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const uIDv4: string = '21d18606-5971-4136-90c1-decdef95fc1e'; // For example\nconst uID: string = `0x${uIDv4.replace(/-/g, '')}`; // Results in 0x21d186065971413690c1decdef95fc1e\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const uIDv4 = '21d18606-5971-4136-90c1-decdef95fc1e'; // For example\nconst uID = `0x${uIDv4.replace(/-/g, '')}`; // Results in 0x21d186065971413690c1decdef95fc1e\n")))),(0,i.kt)("p",null,"Because of this delegation to WebAssembly, we have to painstakingly format parameters in hexadecimal. This explains the convoluted lines above and below."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bob.did")," already comes formatted in hexadecimal."),(0,i.kt)("p",null,"With those in hand, let's calculate the CddId off-chain. Using the imports mentioned above:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const cddIdOutputString: string = confidential_identity.process_create_cdd_id(\n  JSON.stringify({\n    investor_did: Array.from(hexToU8a(bob.did)),\n    investor_unique_id: Array.from(hexToU8a(uID)),\n  })\n);\nconst cddIdOutput: JSON = JSON.parse(cddIdOutputString);\nconst cddId: string = `0x${createHexString(cddIdOutput.cdd_id)}`;\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const cddIdOutputString = confidential_identity.process_create_cdd_id(\n  JSON.stringify({\n    investor_did: Array.from(hexToU8a(bob.did)),\n    investor_unique_id: Array.from(hexToU8a(uID)),\n  })\n);\nconst cddIdOutput = JSON.parse(cddIdOutputString);\nconst cddId = `0x${createHexString(cddIdOutput.cdd_id)}`;\n")))),(0,i.kt)("p",null,"Not excessively difficult. We have all the arguments we need to go ahead and publish the result."),(0,i.kt)("h3",{id:"publish-the-cdd-attestation"},"Publish the CDD attestation"),(0,i.kt)("p",null,"And we are back to familiar territory."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const nextYear: Date = new Date();\nnextYear.setFullYear(nextYear.getFullYear() + 1);\nconst cddClaimQueue: TransactionQueue<void> = await apiEzCdd.claims.addClaims({\n  claims: [\n    {\n      claim: {\n        type: ClaimType.CustomerDueDiligence,\n        id: cddId,\n      },\n      target: bob.did,\n      expiry: nextYear,\n    },\n  ],\n});\nawait cddClaimQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const nextYear = new Date();\nnextYear.setFullYear(nextYear.getFullYear() + 1);\nconst cddClaimQueue = await apiEzCdd.claims.addClaims({\n  claims: [\n    {\n      claim: {\n        type: ClaimType.CustomerDueDiligence,\n        id: cddId,\n      },\n      target: bob.did,\n      expiry: nextYear,\n    },\n  ],\n});\nawait cddClaimQueue.run();\n")))),(0,i.kt)("p",null,"With this Bob is now ",(0,i.kt)("em",{parentName:"p"},"CDD'd")," and can transact in materially-significant ways, including, as mentioned earlier by accepting the authorisation request."),(0,i.kt)("h2",{id:"transact-in-acme"},"Transact in ACME"),(0,i.kt)("p",null,"If Bob wants to transact with ACME securities, have a look at his adding an ",(0,i.kt)("a",{parentName:"p",href:"/docs/distribute/with-sdk#publish-the-investor-uniqueness-claims"},"investor uniqueness claim"),"."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"We have seen how a CDD service provider needs to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"access the PUIS and generate a uID,"),(0,i.kt)("li",{parentName:"ul"},"create new accounts on Polymesh, and"),(0,i.kt)("li",{parentName:"ul"},"publish carefully crafted CDD attestations.")),(0,i.kt)("h2",{id:"links"},"Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SDK: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/PolymeshAssociation/polymesh-sdk/wiki"},"https://github.com/PolymeshAssociation/polymesh-sdk/wiki"))))}m.isMDXComponent=!0}}]);