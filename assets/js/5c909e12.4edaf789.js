"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[84557],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(r),m=i,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4644:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var n=r(87462),i=(r(67294),r(3905));const a={},s=void 0,o={unversionedId:"Interfaces/API/Procedures/Types/ClaimClassicTickerParams",id:"Interfaces/API/Procedures/Types/ClaimClassicTickerParams",title:"ClaimClassicTickerParams",description:"api/procedures/types.ClaimClassicTickerParams",source:"@site/sdk-docs/Interfaces/API/Procedures/Types/ClaimClassicTickerParams.md",sourceDirName:"Interfaces/API/Procedures/Types",slug:"/Interfaces/API/Procedures/Types/ClaimClassicTickerParams",permalink:"/polymesh-documentation-site/sdk-docs/Interfaces/API/Procedures/Types/ClaimClassicTickerParams",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"AssetBase",permalink:"/polymesh-documentation-site/sdk-docs/Interfaces/API/Procedures/Types/AssetBase"},next:{title:"ClaimCountTransferRestrictionInput",permalink:"/polymesh-documentation-site/sdk-docs/Interfaces/API/Procedures/Types/ClaimCountTransferRestrictionInput"}},c={},l=[{value:"Properties",id:"properties",level:2},{value:"ethereumSignature",id:"ethereumsignature",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"ticker",id:"ticker",level:3},{value:"Defined in",id:"defined-in-1",level:4}],p={toc:l};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/polymesh-documentation-site/sdk-docs/Modules/API/Procedures/Types"},"api/procedures/types"),".ClaimClassicTickerParams"),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"ethereumsignature"},"ethereumSignature"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"ethereumSignature"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"signature generated by signing a message formed by the DID (hex without the leading 0x),\nprefixed by ",(0,i.kt)("inlineCode",{parentName:"p"},"classic_claim"),". Example: if the DID is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x1230000000000000000000000000000000000000000000000000000000000000"),",\nthe message would be ",(0,i.kt)("inlineCode",{parentName:"p"},"classic_claim1230000000000000000000000000000000000000000000000000000000000000")),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/15be87e8/src/api/procedures/types.ts#L271"},"api/procedures/types.ts:271")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"ticker"},"ticker"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"ticker"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"ticker symbol to claim"),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/15be87e8/src/api/procedures/types.ts#L275"},"api/procedures/types.ts:275")))}u.isMDXComponent=!0}}]);