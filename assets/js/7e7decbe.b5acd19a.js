"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[48373],{4604:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"developer-resources/tooling/rest-api","title":"REST API","description":"Interact with the Polymesh blockchain via a standard RESTful API","source":"@site/docs/300-developer-resources/010-tooling/030-rest-api.mdx","sourceDirName":"300-developer-resources/010-tooling","slug":"/development/tooling/rest-api","permalink":"/polymesh-documentation-site/development/tooling/rest-api","draft":false,"unlisted":false,"editUrl":"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/300-developer-resources/010-tooling/030-rest-api.mdx","tags":[{"inline":true,"label":"development","permalink":"/polymesh-documentation-site/tags/development"},{"inline":true,"label":"api","permalink":"/polymesh-documentation-site/tags/api"},{"inline":true,"label":"rest","permalink":"/polymesh-documentation-site/tags/rest"}],"version":"current","sidebarPosition":30,"frontMatter":{"title":"REST API","description":"Interact with the Polymesh blockchain via a standard RESTful API","id":"rest-api","slug":"/development/tooling/rest-api","sidebar_label":"REST API","tags":["development","api","rest"]},"sidebar":"docs","previous":{"title":"Local Dev Environment","permalink":"/polymesh-documentation-site/development/tooling/local-setup"},"next":{"title":"SubQuery Indexer","permalink":"/polymesh-documentation-site/development/tooling/subquery"}}');var t=s(74848),r=s(28453);const a={title:"REST API",description:"Interact with the Polymesh blockchain via a standard RESTful API",id:"rest-api",slug:"/development/tooling/rest-api",sidebar_label:"REST API",tags:["development","api","rest"]},o=void 0,l={},c=[{value:"Overview",id:"overview",level:2},{value:"The Value of a Blockchain REST API",id:"the-value-of-a-blockchain-rest-api",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Signing Transactions",id:"signing-transactions",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Using the API with <code>curl</code>",id:"using-the-api-with-curl",level:2},{value:"Example 1: Get Network Properties",id:"example-1-get-network-properties",level:3},{value:"Example 2: Get Asset Details",id:"example-2-get-asset-details",level:3},{value:"Example 3: Get Identity Details",id:"example-3-get-identity-details",level:3},{value:"Example 4: Transfer POLYX",id:"example-4-transfer-polyx",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Polymesh REST API provides a developer-friendly interface to interact with the Polymesh blockchain using standard HTTP requests. This API allows you to perform a wide range of operations without needing to interact directly with the lower-level blockchain protocols or the Polymesh SDK, making it accessible from virtually any programming language."}),"\n",(0,t.jsxs)(n.p,{children:["The API is open source and ",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/polymesh-rest-api/",children:"available on GitHub"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Built on Polymesh, an institutional-grade permissioned blockchain for regulated assets, the REST API offers endpoints covering core functionalities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identity Management"}),": Query identity details, associated keys, claims, and permissions. Register new identities (if authorized)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Asset Management"}),": Create, issue, manage, and query both fungible assets and non-fungible tokens (NFTs). Handle asset documents, ownership transfers, and metadata."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compliance"}),": Define, manage, and query compliance rules, requirements, and trusted claim issuers for assets."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Settlement"}),": Create and manage settlement instructions and trading venues. Affirm, reject, and execute settlements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Corporate Actions"}),": Initiate and manage dividend distributions, query corporate action configurations, and handle payments/claims."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Transactions"}),": Submit pre-signed transactions generated offline or trigger transactions signed by a configured Signing Manager (like HashiCorp Vault or local keys)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Information"}),": Query network status, block details, transaction history, and account balances."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Portfolio Management"}),": Create, manage, and query asset portfolios associated with identities."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Staking & Governance"}),": (Functionality may vary depending on API version) Interact with staking operations and governance proposals."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This API is ideal for developers building applications, backend integrations, or scripts that need to interface with Polymesh using familiar RESTful patterns."}),"\n",(0,t.jsx)(n.admonition,{title:"Try it Locally!",type:"note",children:(0,t.jsxs)(n.p,{children:["Want to run the examples below? Follow the ",(0,t.jsx)(n.a,{href:"/development/tooling/local-setup",children:(0,t.jsx)(n.strong,{children:"Local Development Environment Setup Guide"})})," to run a complete Polymesh stack (node, indexer, REST APIs) using Docker on your machine. The local setup provides the REST API endpoints (e.g., ",(0,t.jsx)(n.code,{children:"http://localhost:3005"})," for Vault-backed signing) used in the examples."]})}),"\n",(0,t.jsx)(n.h2,{id:"the-value-of-a-blockchain-rest-api",children:"The Value of a Blockchain REST API"}),"\n",(0,t.jsx)(n.p,{children:"Providing a RESTful interface to a sophisticated blockchain like Polymesh offers distinct advantages. Traditionally, blockchain interaction requires specialized libraries (like SDKs specific to a language) or direct interaction with node RPC endpoints, potentially involving intricate data encoding and transaction construction."}),"\n",(0,t.jsx)(n.p,{children:"A REST API simplifies this significantly:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accessibility"}),": Developers can use any programming language or tool capable of making HTTP requests (e.g., ",(0,t.jsx)(n.code,{children:"curl"}),", Python ",(0,t.jsx)(n.code,{children:"requests"}),", JavaScript ",(0,t.jsx)(n.code,{children:"fetch"}),", Postman), eliminating the need to learn blockchain-specific libraries for basic interactions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Faster Integration"}),": Integrating Polymesh capabilities into existing applications (web services, enterprise systems) becomes much quicker, leveraging established patterns for API consumption."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reduced Complexity"}),": The API handles lower-level details like transaction formatting and interaction with the underlying SDK or node, presenting developers with clearer, resource-oriented endpoints."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Standardization"}),": It follows familiar REST principles (standard HTTP methods, status codes, JSON request/response bodies), making it intuitive for a broad range of developers."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This approach allows developers to focus on their application logic rather than the intricacies of blockchain communication, accelerating development and broadening the potential ecosystem of integrated tools and services."}),"\n",(0,t.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsxs)(n.p,{children:["Secure endpoints typically require authentication, often via an API key provided in request headers (e.g., ",(0,t.jsx)(n.code,{children:"x-api-key"}),"). The API includes endpoints for managing these keys (",(0,t.jsx)(n.code,{children:"/auth/api-key/*"}),"). Check the documentation for your specific API deployment regarding how to obtain and use authentication credentials. Public data endpoints might not require authentication."]}),"\n",(0,t.jsx)(n.h2,{id:"signing-transactions",children:"Signing Transactions"}),"\n",(0,t.jsxs)(n.p,{children:["Many state-changing operations (POST, PUT, DELETE) require transaction signing. The REST API manages this through an ",(0,t.jsx)(n.code,{children:"options"})," object in the request body, specifying the ",(0,t.jsx)(n.code,{children:"signer"})," and ",(0,t.jsx)(n.code,{children:"processMode"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="Example Options Object"',children:'{\n  "options": {\n    "signer": "signer-name-or-address", // Identifies the key to sign with\n    "processMode": "submit" // Controls how the transaction is handled\n  },\n  // ... other request parameters\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"signer"})}),": Specifies which key, managed by the API's configured Signing Manager (e.g., local mnemonic, Vault key like ",(0,t.jsx)(n.code,{children:"signer1-1"}),"), should authorize the transaction."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"processMode"})}),": Determines execution flow:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"submit"}),": Sign, send, and wait for inclusion/failure."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"offline"}),": Return the unsigned transaction payload for external signing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"submitWithCallback"}),": Submit and return immediately; results sent via webhook."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dryRun"}),": Simulate without submitting."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The API server uses its Signing Manager to perform the cryptographic signing based on the ",(0,t.jsx)(n.code,{children:"signer"})," identifier."]}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsx)(n.p,{children:"The API provides endpoints grouped around core Polymesh functionalities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Assets (",(0,t.jsx)(n.code,{children:"/assets/"}),")"]}),": Create, issue, query, manage metadata, documents, ownership, compliance, and corporate actions for fungible assets."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["NFTs (",(0,t.jsx)(n.code,{children:"/nfts/"}),")"]}),": Manage NFT collections and individual non-fungible tokens."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Identities (",(0,t.jsx)(n.code,{children:"/identities/"}),")"]}),": Manage on-chain identities, keys, permissions, claims, and related entities like portfolios and authorizations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Accounts (",(0,t.jsx)(n.code,{children:"/accounts/"}),")"]}),": Handle POLYX balances, transfers, transaction history, and account-specific permissions or subsidies."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Transactions (",(0,t.jsx)(n.code,{children:"/transactions/"}),")"]}),": Submit externally signed transactions or query transaction status by hash."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Settlement (",(0,t.jsx)(n.code,{children:"/settlements/"}),", ",(0,t.jsx)(n.code,{children:"/venues/"}),", ",(0,t.jsx)(n.code,{children:"/instructions/"}),")"]}),": Manage trading venues and the lifecycle of settlement instructions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Compliance (",(0,t.jsx)(n.code,{children:"/compliance-requirements/"}),", ",(0,t.jsx)(n.code,{children:"/trusted-claim-issuers/"}),")"]}),": Configure and query asset compliance rules."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Corporate Actions (",(0,t.jsx)(n.code,{children:"/corporate-actions/"}),")"]}),": Handle dividends, checkpoints, and other corporate events linked to assets."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Network (",(0,t.jsx)(n.code,{children:"/network/"}),")"]}),": Retrieve blockchain status, block details, and configuration."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Signer (",(0,t.jsx)(n.code,{children:"/signer/"}),")"]}),": Map configured signer names to their blockchain addresses."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Authentication (",(0,t.jsx)(n.code,{children:"/auth/"}),", ",(0,t.jsx)(n.code,{children:"/users/"}),")"]}),": Manage API access credentials (specific to deployment)."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"using-the-api-with-curl",children:["Using the API with ",(0,t.jsx)(n.code,{children:"curl"})]}),"\n",(0,t.jsxs)(n.p,{children:["These examples demonstrate basic interactions. Assume the API is running at ",(0,t.jsx)(n.code,{children:"http://localhost:3005"})," (as provided by the local development setup using Vault). Set the ",(0,t.jsx)(n.code,{children:"REST_API_BASE_URL"})," environment variable. Use ",(0,t.jsx)(n.code,{children:"jq"})," to pretty-print JSON responses."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'export REST_API_BASE_URL="http://localhost:3005"\n# Optional: Set API key if needed\n# export MY_API_KEY="your-api-key-here"\n# Add header: -H "x-api-key: ${MY_API_KEY}" to curl commands if needed\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-1-get-network-properties",children:"Example 1: Get Network Properties"}),"\n",(0,t.jsx)(n.p,{children:"Fetch basic information about the connected Polymesh network."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -s -X GET "${REST_API_BASE_URL}/network" \\\n  -H "accept: application/json" | jq\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Response:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "Development",\n  "version": "9",\n  "genesisHash": "0x..."\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-2-get-asset-details",children:"Example 2: Get Asset Details"}),"\n",(0,t.jsxs)(n.p,{children:["Fetch details for asset ",(0,t.jsx)(n.code,{children:"MYASSET"}),". Replace with a valid ticker or Asset ID (e.g., one created via the local setup scripts or a previous API call)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'export ASSET_ID="MYASSET" # Replace with an actual Ticker or Asset ID\n\ncurl -s -X GET "${REST_API_BASE_URL}/assets/${ASSET_ID}" \\\n  -H "accept: application/json" | jq\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Response (structure):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "assetId": "unique-asset-id-string",\n  "ticker": "MYASSET",\n  "owner": "0x...",\n  "assetType": "EquityCommon",\n  "name": "My Example Asset",\n  "totalSupply": "1000000",\n  "isDivisible": true,\n  "securityIdentifiers": [\n    {\n      "type": "Isin",\n      "value": "US123..."\n    }\n  ],\n  "fundingRound": "Series A",\n  "isFrozen": false,\n  "agents": [\n    "0x..."\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-3-get-identity-details",children:"Example 3: Get Identity Details"}),"\n",(0,t.jsxs)(n.p,{children:["Fetch details for an identity by DID. Replace ",(0,t.jsx)(n.code,{children:"0x..."})," with a valid DID (e.g., one associated with ",(0,t.jsx)(n.code,{children:"signer1-1"})," from the local setup)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# First get the DID for signer1-1 (assuming Vault setup)\nSIGNER1_ADDR=$(curl -s -X GET "${REST_API_BASE_URL}/signer/signer1-1" -H "accept: application/json" | jq -r .address)\nTARGET_DID=$(curl -s -X GET "${REST_API_BASE_URL}/accounts/${SIGNER1_ADDR}/identity" -H "accept: application/json" | jq -r .did)\n\necho "Querying DID: $TARGET_DID"\n\ncurl -s -X GET "${REST_API_BASE_URL}/identities/${TARGET_DID}" \\\n  -H "accept: application/json" | jq\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Response (structure):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "did": "0x...",\n  "primaryAccount": {\n    "account": {\n      "signerType": "Account",\n      "address": "5..."\n    },\n    "permissions": {\n      /* ... full permissions ... */\n    }\n  },\n  "secondaryAccounts": [\n    // ... list of secondary accounts if any ...\n  ],\n  "secondaryAccountsFrozen": false\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-4-transfer-polyx",children:"Example 4: Transfer POLYX"}),"\n",(0,t.jsxs)(n.p,{children:["Transfers 50 POLYX from the account managed by ",(0,t.jsx)(n.code,{children:"signer1-1"})," (Vault SM) to the account managed by ",(0,t.jsx)(n.code,{children:"signer2-1"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Get recipient address (assuming signer2-1 is configured)\nSIGNER2_ADDRESS=$(curl -s -X GET "${REST_API_BASE_URL}/signer/signer2-1" -H "accept: application/json" | jq -r .address)\n\nif [ -z "$SIGNER2_ADDRESS" ] || [ "$SIGNER2_ADDRESS" == "null" ]; then\n  echo "Error: Could not resolve address for signer2-1. Make sure local dev setup completed."\nelse\n  echo "Recipient (signer2-1) Address: $SIGNER2_ADDRESS"\n\n  # Prepare JSON payload\n  JSON_PAYLOAD=$(cat <<EOF\n  {\n    "options": {\n      "signer": "signer1-1",\n      "processMode": "submit"\n    },\n    "to": "$SIGNER2_ADDRESS",\n    "amount": "50",\n    "memo": "REST API Transfer Example"\n  }\nEOF\n  )\n\n  echo "Submitting POLYX Transfer:"\n  # Send the POST request and pretty-print the JSON response\n  curl -s -X POST "${REST_API_BASE_URL}/accounts/transfer" \\\n    -H "Content-Type: application/json" \\\n    -H "accept: application/json" \\\n    -d "$JSON_PAYLOAD" | jq\nfi\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Response (structure):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "transactions": [\n    {\n      "blockHash": "0x...",\n      "transactionHash": "0x...",\n      "blockNumber": "...",\n      "type": "single",\n      "transactionTag": "balances.transferWithMemo"\n    }\n  ],\n  "details": {\n    "status": "Succeeded",\n    "fees": {\n      "protocol": "0",\n      "gas": "...",\n      "total": "..."\n    },\n    "supportsSubsidy": true,\n    "payingAccount": {\n      "balance": "...",\n      "type": "Caller",\n      "address": "..." // Address of signer1-1\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"These examples illustrate how to leverage the REST API for common tasks. Explore the full API specification (if available separately) or use tools like Postman or Swagger UI (if hosted by the API instance) to discover all available endpoints, parameters, and response schemas."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(96540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);