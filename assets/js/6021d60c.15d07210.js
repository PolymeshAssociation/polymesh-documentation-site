"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[93059],{28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var t=n(96540);const o={},i=t.createContext(o);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:s},e.children)}},62440:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"api/procedures/types/interfaces/ProcedureOpts","title":"Interface: ProcedureOpts","description":"Defined in113","source":"@site/sdk-docs_versioned_docs/version-v29.0.x/api/procedures/types/interfaces/ProcedureOpts.mdx","sourceDirName":"api/procedures/types/interfaces","slug":"/api/procedures/types/interfaces/ProcedureOpts","permalink":"/polymesh-documentation-site/sdk-docs/api/procedures/types/interfaces/ProcedureOpts","draft":false,"unlisted":false,"tags":[],"version":"v29.0.x","frontMatter":{"sidebar_label":"ProcedureOpts"},"sidebar":"defaultSidebar","previous":{"title":"ProcedureMethod()","permalink":"/polymesh-documentation-site/sdk-docs/api/procedures/types/interfaces/ProcedureMethod"},"next":{"title":"RedeemNftParams","permalink":"/polymesh-documentation-site/sdk-docs/api/procedures/types/interfaces/RedeemNftParams"}}');var o=n(74848),i=n(28453);const r={sidebar_label:"ProcedureOpts"},c="Interface: ProcedureOpts",d={},a=[{value:"Properties",id:"properties",level:2},{value:"mortality?",id:"mortality",level:3},{value:"multiSigOpts?",id:"multisigopts",level:3},{value:"nonce?",id:"nonce",level:3},{value:"Note",id:"note",level:4},{value:"signingAccount?",id:"signingaccount",level:3},{value:"skipChecks?",id:"skipchecks",level:3},{value:"Note",id:"note-1",level:4}];function l(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"interface-procedureopts",children:"Interface: ProcedureOpts"})}),"\n",(0,o.jsxs)(s.p,{children:["Defined in: ",(0,o.jsx)(s.a,{href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/bee6a2fe7a8ce5db42a6982e793782182cde2153/src/api/procedures/types.ts#L113",children:"src/api/procedures/types.ts:113"})]}),"\n",(0,o.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsx)(s.h3,{id:"mortality",children:"mortality?"}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"optional"})," ",(0,o.jsx)(s.strong,{children:"mortality"}),": ",(0,o.jsx)(s.a,{href:"/polymesh-documentation-site/sdk-docs/api/procedures/types/type-aliases/MortalityProcedureOpt",children:(0,o.jsx)(s.code,{children:"MortalityProcedureOpt"})})]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["Defined in: ",(0,o.jsx)(s.a,{href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/bee6a2fe7a8ce5db42a6982e793782182cde2153/src/api/procedures/types.ts#L133",children:"src/api/procedures/types.ts:133"})]}),"\n",(0,o.jsx)(s.p,{children:'This option allows for transactions that never expire, aka "immortal". By default, a transaction is only valid for approximately 5 minutes (250 blocks) after its construction. Allows for transaction construction to be decoupled from its submission, such as requiring manual approval for the signing or providing "at least once" guarantees.'}),"\n",(0,o.jsxs)(s.p,{children:["More information can be found ",(0,o.jsx)(s.a,{href:"https://wiki.polkadot.network/docs/build-protocol-info#transaction-mortality",children:"here"}),". Note the Polymesh chain will ",(0,o.jsx)(s.strong,{children:"never"})," reap Accounts, so the risk of a replay attack is mitigated."]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"multisigopts",children:"multiSigOpts?"}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"optional"})," ",(0,o.jsx)(s.strong,{children:"multiSigOpts"}),": ",(0,o.jsx)(s.a,{href:"/polymesh-documentation-site/sdk-docs/api/procedures/types/interfaces/MultiSigProcedureOpt",children:(0,o.jsx)(s.code,{children:"MultiSigProcedureOpt"})})]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["Defined in: ",(0,o.jsx)(s.a,{href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/bee6a2fe7a8ce5db42a6982e793782182cde2153/src/api/procedures/types.ts#L138",children:"src/api/procedures/types.ts:138"})]}),"\n",(0,o.jsxs)(s.p,{children:["These options will only apply when the ",(0,o.jsx)(s.code,{children:"signingAccount"})," is a MultiSig signer and the transaction is being wrapped as a proposal"]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"nonce",children:"nonce?"}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"optional"})," ",(0,o.jsx)(s.strong,{children:"nonce"}),": ",(0,o.jsx)(s.code,{children:"BigNumber"})," | ",(0,o.jsx)(s.code,{children:"Promise"}),"<",(0,o.jsx)(s.code,{children:"BigNumber"}),"> | () => ",(0,o.jsx)(s.code,{children:"BigNumber"})," | ",(0,o.jsx)(s.code,{children:"Promise"}),"<",(0,o.jsx)(s.code,{children:"BigNumber"}),">"]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["Defined in: ",(0,o.jsx)(s.a,{href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/bee6a2fe7a8ce5db42a6982e793782182cde2153/src/api/procedures/types.ts#L126",children:"src/api/procedures/types.ts:126"})]}),"\n",(0,o.jsx)(s.p,{children:"nonce value for signing the transaction"}),"\n",(0,o.jsxs)(s.p,{children:["An ",(0,o.jsx)(s.a,{href:"/polymesh-documentation-site/sdk-docs/api/entities/Account/classes/Account",children:"Account"})," can directly fetch its current nonce by calling ",(0,o.jsx)(s.a,{href:"/polymesh-documentation-site/sdk-docs/api/entities/Account/classes/Account#getcurrentnonce",children:"account.getCurrentNonce"}),". More information can be found at: ",(0,o.jsx)(s.a,{href:"https://polkadot.js.org/docs/api/cookbook/tx/#how-do-i-take-the-pending-tx-pool-into-account-in-my-nonce",children:"https://polkadot.js.org/docs/api/cookbook/tx/#how-do-i-take-the-pending-tx-pool-into-account-in-my-nonce"})]}),"\n",(0,o.jsx)(s.h4,{id:"note",children:"Note"}),"\n",(0,o.jsx)(s.p,{children:"the passed value can be either the nonce itself or a function that returns the nonce. This allows, for example, passing a closure that increases the returned value every time it's called, or a function that fetches the nonce from the chain or a different source"}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"signingaccount",children:"signingAccount?"}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"optional"})," ",(0,o.jsx)(s.strong,{children:"signingAccount"}),": ",(0,o.jsx)(s.code,{children:"string"})," | ",(0,o.jsx)(s.a,{href:"/polymesh-documentation-site/sdk-docs/api/entities/Account/classes/Account",children:(0,o.jsx)(s.code,{children:"Account"})})]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["Defined in: ",(0,o.jsx)(s.a,{href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/bee6a2fe7a8ce5db42a6982e793782182cde2153/src/api/procedures/types.ts#L117",children:"src/api/procedures/types.ts:117"})]}),"\n",(0,o.jsx)(s.p,{children:"Account or address of a signing key to replace the current one (for this procedure only)"}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"skipchecks",children:"skipChecks?"}),"\n",(0,o.jsxs)(s.blockquote,{children:["\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"optional"})," ",(0,o.jsx)(s.strong,{children:"skipChecks"}),": ",(0,o.jsx)(s.a,{href:"/polymesh-documentation-site/sdk-docs/api/procedures/types/interfaces/SkipChecksOpt",children:(0,o.jsx)(s.code,{children:"SkipChecksOpt"})})]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["Defined in: ",(0,o.jsx)(s.a,{href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/bee6a2fe7a8ce5db42a6982e793782182cde2153/src/api/procedures/types.ts#L147",children:"src/api/procedures/types.ts:147"})]}),"\n",(0,o.jsx)(s.p,{children:"This option allows for skipping checks for the Procedure. By default, all checks are performed."}),"\n",(0,o.jsx)(s.p,{children:"This can be useful while batching transactions which could have failed due to insufficient roles or permissions individually, but you don't want to fail the entire batch."}),"\n",(0,o.jsx)(s.h4,{id:"note-1",children:"Note"}),"\n",(0,o.jsx)(s.p,{children:"even if the checks are skipped from being validated on the SDK, they will still be validated on the chain"})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);