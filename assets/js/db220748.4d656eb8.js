"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[99944],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||s;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=m;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[u]="string"==typeof e?e:i,o[1]=r;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const s={sidebar_position:6,title:"With the SDK",description:"Originating assets with the Polymesh SDK",slug:"/originate/sdk/"},o=void 0,r={unversionedId:"originate/originate-sdk",id:"originate/originate-sdk",title:"With the SDK",description:"Originating assets with the Polymesh SDK",source:"@site/docs/03-originate/originate-sdk.mdx",sourceDirName:"03-originate",slug:"/originate/sdk/",permalink:"/polymesh-documentation-site/docs/originate/sdk/",draft:!1,editUrl:"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/03-originate/originate-sdk.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"With the SDK",description:"Originating assets with the Polymesh SDK",slug:"/originate/sdk/"},sidebar:"defaultSidebar",previous:{title:"Compliance",permalink:"/polymesh-documentation-site/docs/originate/compliance/"},next:{title:"Distributing an Assets",permalink:"/polymesh-documentation-site/docs/category/distributing-an-assets"}},c={},l=[{value:"Preconditions",id:"preconditions",level:2},{value:"Ticker reservation",id:"ticker-reservation",level:2},{value:"Ticker creation",id:"ticker-creation",level:2},{value:"Secondary Accounts",id:"secondary-accounts",level:2},{value:"Asset ownership transfer",id:"asset-ownership-transfer",level:2},{value:"Compliance",id:"compliance",level:2},{value:"Links",id:"links",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},u=p("Tabs"),d=p("TabItem"),m={toc:l};function h(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the previous exercise, we originated a simple asset, ACME Corp equity. As we did so, we discovered that there are many more ",(0,i.kt)("strong",{parentName:"p"},"configurable properties")," available to address common business requirements."),(0,i.kt)("p",null,"The Polymesh Dashboard is constructed with the SDK. The SDK supports every process you see there, and more. Use the SDK to build integrations with internal systems. Fortunately, the SDK's methods are intelligible when you know what it is you intend to do."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you want to take a closer look at the SDK, a peek into the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/polymesh-sdk/wiki"},"SDK documentation")," is recommendable.")),(0,i.kt)("p",null,"The SDK is a comprehensive set of business-level methods for inspecting and interacting with the Polymesh network using either Javascript or Typescript, at the developer's discretion."),(0,i.kt)("p",null,"You can find it here ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@polymeshassociation/polymesh-sdk"},"@polymeshassociation/polymesh-sdk")),(0,i.kt)("h2",{id:"preconditions"},"Preconditions"),(0,i.kt)("p",null,"If you went through the Quick Start, we can assume that you have created an account (a public-private key pair) on the Polymesh Testnet, that you associated it with an account, and that you credited it with POLYX. We shall call this personal signing key ",(0,i.kt)("inlineCode",{parentName:"p"},"aliceKey"),", and the personal account it represents ",(0,i.kt)("inlineCode",{parentName:"p"},"alice"),"."),(0,i.kt)("p",null,"Here, we are going to follow along the Token Studio Dashboard exercise, and do the same ",(0,i.kt)("em",{parentName:"p"},"mistake"),". whereby she creates the asset with her personal account, and which we will eventually fix. The credible simple reason why Alice created the asset with her personal account is that her and her co-founders wanted to act fast so as to have the ticker available before getting the company through CDD."),(0,i.kt)("p",null,"To recap:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Alice, ACME's CEO and acting agent, already has an ",(0,i.kt)("strong",{parentName:"li"},"individual")," Polymesh account, named ",(0,i.kt)("inlineCode",{parentName:"li"},"alice"),", tied to a primary private key named ",(0,i.kt)("inlineCode",{parentName:"li"},"aliceKey"),";"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"aliceKey"),"'s private key is based on the ",(0,i.kt)("inlineCode",{parentName:"li"},'"word1 word2 ..."')," mnemonic;"),(0,i.kt)("li",{parentName:"ul"},"A Polymesh client has been ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/PolymeshAssociation/polymesh-sdk/wiki/api.client.Polymesh.Polymesh#connect"},"instantiated")," by Alice so she can do the next actions:")),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const signingManagerAlice: LocalSigningManager =\n  await LocalSigningManager.create({\n    accounts: [\n      {\n        mnemonic: 'word1 word2 ...',\n      },\n    ],\n  });\n\nconst apiAlice: Polymesh = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerAlice,\n});\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const signingManagerAlice = await LocalSigningManager.create({\n  accounts: [\n    {\n      mnemonic: 'word1 word2 ...',\n    },\n  ],\n});\n\nconst apiAlice = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerAlice,\n});\n")))),(0,i.kt)("h2",{id:"ticker-reservation"},"Ticker reservation"),(0,i.kt)("p",null,"Before creating the asset proper, Alice needs to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/polymesh-sdk/wiki/api.client.Assets.Assets#reserveticker"},"reserve")," the ACME ticker so that it is not squatted while the founders incorporate the company. Think of it on the same level as grabbing your ",(0,i.kt)("inlineCode",{parentName:"p"},".com")," domain as early as possible:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const reservationQueue: TransactionQueue<TickerReservation> =\n  await apiAlice.assets.reserveTicker({\n    ticker: 'ACME',\n  });\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const reservationQueue = await apiAlice.assets.reserveTicker({\n  ticker: 'ACME',\n});\n")))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionQueue")," type is just that, a queue. The transaction(s) in it have not been launched. Notice that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is a generic type parameterised with ",(0,i.kt)("inlineCode",{parentName:"li"},"TickerReservation"),". This means that, eventually, the queue yields an instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"TickerReservation"),";"),(0,i.kt)("li",{parentName:"ul"},"The constructor of ",(0,i.kt)("inlineCode",{parentName:"li"},"TransactionQueue")," expects a ",(0,i.kt)("a",{parentName:"li",href:"https://developers.polymath.network/polymesh-sdk-api-reference/classes/transactionqueue#constructor"},(0,i.kt)("inlineCode",{parentName:"a"},"context")),"; it is in this ",(0,i.kt)("inlineCode",{parentName:"li"},"context")," object that ",(0,i.kt)("inlineCode",{parentName:"li"},"apiAlice")," is referenced so it is understood that ",(0,i.kt)("inlineCode",{parentName:"li"},"aliceKey")," is the private key to use for signing;"),(0,i.kt)("li",{parentName:"ul"},"Each transaction in the queue has its own status;"),(0,i.kt)("li",{parentName:"ul"},"The queue itself has its own ",(0,i.kt)("a",{parentName:"li",href:"https://developers.polymath.network/polymesh-sdk-api-reference/classes/transactionqueue#status"},"status"),".")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Of note, the reservation cost, at the time of writing, is of ",(0,i.kt)("strong",{parentName:"p"},"2,500 POLYX"),", before network fees.")),(0,i.kt)("p",null,"Let's ",(0,i.kt)("a",{parentName:"p",href:"https://developers.polymath.network/polymesh-sdk-api-reference/classes/transactionqueue#run"},"run")," it."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const reservation: TickerReservation = await reservationQueue.run();\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const reservation = await reservationQueue.run();\n")))),(0,i.kt)("p",null,"It is at this point that the necessary signatures are collected for the transactions. ",(0,i.kt)("inlineCode",{parentName:"p"},"apiAlice")," was created straight with the mnemonic, so the signature will be affixed automatically. However, if this was taking place in the browser, for instance in the Token Studio Dashboard and with the Polymesh Wallet extension, then there is a possibility that Alice will refuse to sign when prompted."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You would need to ",(0,i.kt)("inlineCode",{parentName:"p"},"try .run() catch")," it for errors. Here, we opted for clarity and omitted this ",(0,i.kt)("em",{parentName:"p"},"detail"),".")),(0,i.kt)("p",null,"Also note that with ",(0,i.kt)("inlineCode",{parentName:"p"},"await reservationQueue.run()")," we patiently wait for the queue to finalise all its transactions. However, a ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionQueue")," can provide intermediate information about its changing status and that of its component transactions. If this is of interest to you, you can pass callbacks to ",(0,i.kt)("a",{parentName:"p",href:"https://developers.polymath.network/polymesh-sdk-api-reference/classes/transactionqueue#onstatuschange"},(0,i.kt)("inlineCode",{parentName:"a"},"onStatusChange"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://developers.polymath.network/polymesh-sdk-api-reference/classes/transactionqueue#ontransactionstatuschange"},(0,i.kt)("inlineCode",{parentName:"a"},"onTransactionStatusChange")),"."),(0,i.kt)("p",null,"At this stage, Alice owns the reservation. You can confirm it with the following:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const alice: Identity = await apiAlice.getSigningIdentity();\nconst details: TickerReservationDetails = await reservation.details();\nconst owner: Identity = details.owner;\nassert(owner.did === alice.did);\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const alice = await apiAlice.getSigningIdentity();\nconst { owner } = await reservation.details();\nassert(owner.did === alice.did);\n")))),(0,i.kt)("p",null,"Something is not immediately apparent from the few lines of code above. It is nonetheless important to point it out."),(0,i.kt)("p",null,"When we created ",(0,i.kt)("inlineCode",{parentName:"p"},"apiAlice")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"await Polymesh.connect()"),", we passed a ",(0,i.kt)("inlineCode",{parentName:"p"},"signingManager")," which was created with an ",(0,i.kt)("inlineCode",{parentName:"p"},"accountMnemonic")," that allowed it to recreate the ",(0,i.kt)("inlineCode",{parentName:"p"},"aliceKey")," private key. On chain the public key is expressed in ",(0,i.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs/keyring/start/ss58/"},"SS58 format"),' and referred to as an "address" or "account". The account is then is associated with an identity, whether as a primary key, like here, or a secondary one. When the private key is used to sign a transaction, it is the ',(0,i.kt)("strong",{parentName:"p"},"associated identity")," that will be considered to be the one doing the action."),(0,i.kt)("p",null,"This associated account information is ",(0,i.kt)("strong",{parentName:"p"},"not embedded in the private key"),". It is an association that is stored on the blockchain, may change in the future, and as such, it needs to be retrieved to be known."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"So when we wrote ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"await apiAlice.getSigningIdentity()"),", this is no accident. We indeed need to do a round trip to the blockchain to know what account our public key is associated with.")),(0,i.kt)("h2",{id:"ticker-creation"},"Ticker creation"),(0,i.kt)("p",null,"Now that the ticker is reserved, it is time to issue the asset."),(0,i.kt)("p",null,"Oh wait! The reservation may have happened some time ago. After all a reservation remains valid for 60 days, for instance. And your ",(0,i.kt)("inlineCode",{parentName:"p"},"const reservation: TickerReservation")," instance might no longer be in memory."),(0,i.kt)("p",null,"How do you get it back? Use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/polymesh-sdk/wiki/api.client.Assets.Assets#gettickerreservation"},(0,i.kt)("inlineCode",{parentName:"a"},"assets.getTickerReservation")),":"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const signingManagerAlice: LocalSigningManager = await LocalSigningManager.create({...});\nconst apiAlice: Polymesh = await Polymesh.connect({...});\nconst reservation: TickerReservation = await apiAlice.assets.getTickerReservation({\n    "ticker": "ACME"\n});\n'))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const signingManagerAlice = await LocalSigningManager.create({...});\nconst apiAlice = await Polymesh.connect({...});\nconst reservation = await apiAlice.assets.getTickerReservation({\n    "ticker": "ACME"\n});\n')))),(0,i.kt)("p",null,"You will note that the class ",(0,i.kt)("inlineCode",{parentName:"p"},"TickerReservation"),", just like the transaction queue, keeps a ",(0,i.kt)("a",{parentName:"p",href:"https://developers.polymath.network/polymesh-sdk-api-reference/classes/tickerreservation#properties-1"},(0,i.kt)("inlineCode",{parentName:"a"},"protected context: Context")),". This ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," in turn keeps a ",(0,i.kt)("a",{parentName:"p",href:"https://developers.polymath.network/polymesh-sdk-api-reference/classes/context#properties-1"},(0,i.kt)("inlineCode",{parentName:"a"},"polymeshApi")),". It is in there that we find the implicit knowledge that it is ",(0,i.kt)("inlineCode",{parentName:"p"},"alice"),"'s account that is asking for the next actions. If it were any other ",(0,i.kt)("strong",{parentName:"p"},"account")," that had called ",(0,i.kt)("inlineCode",{parentName:"p"},"assets.getTickerReservation"),", this other account would not be able to follow up with a ",(0,i.kt)("inlineCode",{parentName:"p"},".createAsset")," command because it doesn't own the reservation."),(0,i.kt)("p",null,"With our ",(0,i.kt)("inlineCode",{parentName:"p"},"reservation")," in memory, and 10,000 POLYX in ",(0,i.kt)("inlineCode",{parentName:"p"},"alice"),"'s wallet, which is the cost of creation of one asset, we now can create it:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const assetQueue: TransactionQueue<Asset> = await reservation.createAsset({\n  name: 'ACME Co',\n  assetType: KnownAssetType.EquityPreferred,\n  isDivisible: false,\n});\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const assetQueue = await reservation.createAsset({\n  name: 'ACME Co',\n  assetType: 'EquityPreferred',\n  isDivisible: false,\n});\n")))),(0,i.kt)("p",null,"We have another queue, so, as we did before:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const asset: Asset = await assetQueue.run();\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const asset = await assetQueue.run();\n")))),(0,i.kt)("p",null,"Implicit in the creation of this asset is that Alice, as a private individual, is ",(0,i.kt)("strong",{parentName:"p"},"both the asset's owner and its primary issuance agent (PIA)"),". We were satisfied with this situation only up to this point. Now this needs to change."),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"asset")," instance will not always be in memory, so if we wanted to fetch it at a later date, we would do:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const asset: Asset = await apiAlice.assets.getAsset({\n  ticker: 'ACME',\n});\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const asset = await apiAlice.assets.getAsset({\n  ticker: 'ACME',\n});\n")))),(0,i.kt)("h2",{id:"secondary-accounts"},"Secondary Accounts"),(0,i.kt)("p",null,"Now we assume that ACME has gone through CDD and has an account, complete with a private key and its mnemonic, which, in a mirror fashion of that of Alice gives us:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const signingManagerAcme: LocalSigningManager =\n  await LocalSigningManager.create({\n    accounts: [\n      {\n        mnemonic: 'word21 word22 ...',\n      },\n    ],\n  });\nconst apiAcme: Polymesh = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerAcme,\n});\nconst acme: Identity = await apiAcme.getSigningIdentity();\nconst acmeDid: string = acme.did;\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const signingManagerAcme = await LocalSigningManager.create({\n  accounts: [\n    {\n      mnemonic: 'word21 word22 ...',\n    },\n  ],\n});\nconst apiAcme = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerAcme,\n});\nconst acme = await apiAcme.getSigningIdentity();\nconst acmeDid = acme.did;\n")))),(0,i.kt)("p",null,"On her end, Alice, has created another mnemonic for a private key she intends to use when she acts as the CEO of ACME. Again:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const signingManagerCeo: LocalSigningManager = await LocalSigningManager.create(\n  {\n    accounts: [\n      {\n        mnemonic: 'word31 word32 ...',\n      },\n    ],\n  }\n);\nconst apiCeo: Polymesh = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerCeo,\n});\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const signingManagerCeo = await LocalSigningManager.create({\n  accounts: [\n    {\n      mnemonic: 'word31 word32 ...',\n    },\n  ],\n});\nconst apiCeo = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerCeo,\n});\n")))),(0,i.kt)("p",null,"At this point, ",(0,i.kt)("inlineCode",{parentName:"p"},"apiCeo")," has no associated account. It is a signing key in search of an account. Alice first needs to get her public key:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const pubCeo: string = apiCeo.accountManagement.getAccount().address;\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const pubCeo = apiCeo.accountManagement.getAccount().address;\n")))),(0,i.kt)("p",null,"Then she needs to send this ",(0,i.kt)("inlineCode",{parentName:"p"},"pubCeo")," information to ",(0,i.kt)("inlineCode",{parentName:"p"},"apiAcme"),". When this is done, the company can invite her to be a secondary key:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await apiAcme.accountManagement.inviteAccount({\n  targetAccount: pubCeo,\n});\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"await apiAcme.accountManagement.inviteAccount({\n  targetAccount: pubCeo,\n});\n")))),(0,i.kt)("p",null,"With the invitation sent out into the blockchain, back at her computer, Alice, with knowledge of ACME account's number, ",(0,i.kt)("inlineCode",{parentName:"p"},"acmeDid"),", can do:"),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const ceoAccount: Account = apiCeo.accountManagement.getAccount();\nconst pendingAuthorizations: AuthorizationRequest[] =\n  await ceoAccount.authorizations.getReceived();\nconst acmeAuthorization: AuthorizationRequest = pendingAuthorizations.find(\n  (pendingAuthorization: AuthorizationRequest) => {\n    return pendingAuthorization.issuer.did === acmeDid;\n  }\n);\nconst acceptQueue: TransactionQueue<void> = await acmeAuthorization.accept();\nawait acceptQueue.run();\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const ceoAccount = apiCeo.getAccount();\nconst pendingAuthorizations = await ceoAccount.authorizations.getReceived();\nconst acmeAuthorization = pendingAuthorizations.find((pendingAuthorization) => {\n  pendingAuthorization.issuer.did === acmeDid;\n});\nconst acceptQueue = await acmeAuthorization.accept();\nawait acceptQueue.run();\n")))),(0,i.kt)("p",null,"With this done, ",(0,i.kt)("inlineCode",{parentName:"p"},"apiCeo")," now allows Alice to properly act as the CEO, on behalf of ACME."),(0,i.kt)("h2",{id:"asset-ownership-transfer"},"Asset ownership transfer"),(0,i.kt)("p",null,"With the keys and accounts finally set right, it is time for Alice to fix the asset situation, and transfer its ownership to ACME."),(0,i.kt)("p",null,"Since it is Alice the individual who owns the asset, she has to go back to using her personal account."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const asset: Asset = await apiAlice.assets.getAsset({\n  ticker: 'ACME',\n});\nconst transferQueue: TransactionQueue<Asset> = await asset.transferOwnership({\n  target: acmeDid,\n});\nawait transferQueue.run();\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const asset = await apiAlice.assets.getAsset({\n  ticker: 'ACME',\n});\nconst transferQueue = await asset.transferOwnership({\n  target: acmeDid,\n});\nawait transferQueue.run();\n")))),(0,i.kt)("p",null,"With the authorisation recorded in the blockchain, and on the way, Alice can stay on the same computer and switch from her personal identity to her identity as the CEO of ACME to accept the authorisation."),(0,i.kt)("p",null,"She first needs to recall her personal account number, or ",(0,i.kt)("inlineCode",{parentName:"p"},"did"),"."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const alice: Identity = await apiAlice.getSigningIdentity();\nconst aliceDid: string = alice.did;\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const alice = await apiAlice.getSigningIdentity();\nconst aliceDid string = alice.did;\n")))),(0,i.kt)("p",null,"So she can narrow down the authorisation, instead of blindly accepting whatever is in the pipeline."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const pendingAuthorizations: AuthorizationRequest[] =\n  await ceoAccount.authorizations.getReceived();\nconst transferAuthorization: AuthorizationRequest = pendingAuthorizations.find(\n  (pendingAuthorization: AuthorizationRequest) => {\n    return pendingAuthorization.issuer.did === aliceDid;\n  }\n);\nconst acceptQueue: TransactionQueue<void> =\n  await transferAuthorization.accept();\nawait acceptQueue.run();\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const pendingAuthorizations = await ceoAccount.authorizations.getReceived();\nconst transferAuthorization = pendingAuthorizations.find(\n  (pendingAuthorization) => {\n    return pendingAuthorization.issuer.did === aliceDid;\n  }\n);\nconst acceptQueue = await transferAuthorization.accept();\nawait acceptQueue.run();\n")))),(0,i.kt)("p",null,"With this, the asset is rightfully owned by ACME the company."),(0,i.kt)("h2",{id:"compliance"},"Compliance"),(0,i.kt)("p",null,"We are not done yet with the asset, though."),(0,i.kt)("p",null,"As the CEO, Alice still needs to do one more step, that is, to define the conditions of ownership. Namely, require any account who acquires the asset to not have a jurisdictional attestation of ",(0,i.kt)("span",{title:"Elbonia doesn't appear in the CountryCode enum"},"Liechtenstein"),". An exception will be made for the primary issuance agent, who is simply used as a conduit and can send to anyone."),(0,i.kt)("p",null,"We use ACME's account as the KYC service provider, but realistically, it should be another account."),(0,i.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(d,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const acmeCompliance: Compliance = asset.compliance;\nconst acmeRequirements: Requirements = acmeCompliance.requirements;\nconst acme: Identity = await apiCeo.getSigningIdentity();\nconst setRequirementsQueue: TransactionQueue<Asset> =\n  await acmeRequirements.set({\n    requirements: [\n      [\n        {\n          target: ConditionTarget.Sender,\n          type: ConditionType.IsExternalAgent,\n        },\n      ],\n      [\n        {\n          target: ConditionTarget.Receiver,\n          type: ConditionType.IsPresent,\n          claim: {\n            type: ClaimType.KnowYourCustomer,\n            scope: {\n              type: ScopeType.Ticker,\n              value: asset.ticker,\n            },\n          },\n          trustedClaimIssuers: [\n            {\n              identity: acme.did,\n              trustedFor: [ClaimType.KnowYourCustomer],\n            },\n          ],\n        },\n        {\n          target: ConditionTarget.Receiver,\n          type: ConditionType.IsAbsent,\n          claim: {\n            type: ClaimType.Jurisdiction,\n            code: CountryCode.Li,\n            scope: {\n              type: ScopeType.Ticker,\n              value: asset.ticker,\n            },\n          },\n          trustedClaimIssuers: [\n            {\n              identity: acme.did,\n              trustedFor: [ClaimType.Jurisdiction],\n            },\n          ],\n        },\n      ],\n    ],\n  });\nconst updatedAsset: Asset = await setRequirementsQueue.run();\n"))),(0,i.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const acmeCompliance = asset.compliance;\nconst acmeRequirements = acmeCompliance.requirements;\nconst acme = await apiCeo.getSigningIdentity();\nconst setRequirementsQueue = await acmeRequirements.set({\n  requirements: [\n    [\n      {\n        target: 'Sender',\n        type: 'IsExternalAgent',\n      },\n    ],\n    [\n      {\n        target: 'Receiver',\n        type: 'IsPresent',\n        claim: {\n          type: 'KnowYourCustomer',\n          scope: {\n            type: 'Ticker',\n            value: asset.ticker,\n          },\n        },\n        trustedClaimIssuers: [\n          {\n            identity: acme.did,\n            trustedFor: ['KnowYourCustomer'],\n          },\n        ],\n      },\n      {\n        target: 'Receiver',\n        type: 'IsAbsent',\n        claim: {\n          type: 'Jurisdiction',\n          code: 'Li',\n          scope: {\n            type: 'Ticker',\n            value: asset.ticker,\n          },\n        },\n        trustedClaimIssuers: [\n          {\n            identity: acme.did,\n            trustedFor: ['Jurisdiction'],\n          },\n        ],\n      },\n    ],\n  ],\n});\nconst updatedAsset: Asset = await setRequirementsQueue.run();\n")))),(0,i.kt)("p",null,"With this, the asset is ",(0,i.kt)("em",{parentName:"p"},"originated"),". Nobody, including Alice under her personal account, is yet a holder of any amount of the asset, though, we remedy that in the next chapter when we tackle ",(0,i.kt)("strong",{parentName:"p"},"distribution"),"."),(0,i.kt)("h2",{id:"links"},"Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SDK: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/PolymeshAssociation/polymesh-sdk/wiki"},"https://github.com/PolymeshAssociation/polymesh-sdk/wiki"))))}h.isMDXComponent=!0}}]);