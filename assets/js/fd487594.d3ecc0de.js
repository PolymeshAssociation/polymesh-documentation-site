"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[79929],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,h=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(h,r(r({ref:t},l),{},{components:n})):a.createElement(h,r({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},34329:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const i={sidebar_position:6,title:"CDD with the SDK",description:"Provide customer due diligence with the Polymesh SDK",slug:"/kyc/cdd-sdk/"},r=void 0,s={unversionedId:"kyc/cdd-sdk",id:"kyc/cdd-sdk",title:"CDD with the SDK",description:"Provide customer due diligence with the Polymesh SDK",source:"@site/docs/07-kyc/cdd-sdk.mdx",sourceDirName:"07-kyc",slug:"/kyc/cdd-sdk/",permalink:"/polymesh-documentation-site/docs/kyc/cdd-sdk/",draft:!1,editUrl:"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/07-kyc/cdd-sdk.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"CDD with the SDK",description:"Provide customer due diligence with the Polymesh SDK",slug:"/kyc/cdd-sdk/"},sidebar:"defaultSidebar",previous:{title:"KYC Example App",permalink:"/polymesh-documentation-site/docs/kyc/example-app/"},next:{title:"Useful Links",permalink:"/polymesh-documentation-site/docs/resources/github-repositories/"}},c={},d=[{value:"How to create a new account",id:"how-to-create-a-new-account",level:2},{value:"Information collection",id:"information-collection",level:3},{value:"Create the account",id:"create-the-account",level:3},{value:"The CDD attestation",id:"the-cdd-attestation",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Links",id:"links",level:2}],l=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=l("Tabs"),p=l("TabItem"),m={toc:d};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You ought to look at the previous chapter on ",(0,o.kt)("em",{parentName:"p"},"KYC with the SDK")," first.")),(0,o.kt)("p",null,"A CDD service provider is a privileged KYC service provider with a permissioned role to create DID's and add CDD claims to DID's."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"See the ",(0,o.kt)("a",{parentName:"p",href:"/docs/introduction/identity/"},"introduction on identity")," for a refresher.")),(0,o.kt)("p",null,"In particular:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"For ",(0,o.kt)("strong",{parentName:"li"},"brand new users")," of Polymesh, the CDD provider needs to:",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Create a new account controlled by the primary key asked by the user, and return the ",(0,o.kt)("strong",{parentName:"li"},"DID")," to the user;"),(0,o.kt)("li",{parentName:"ol"},"Add a CDD claim to that DID to verify they have gone through verification with them;"))),(0,o.kt)("li",{parentName:"ol"},"For ",(0,o.kt)("strong",{parentName:"li"},"existing users")," that need a new CDD attestation, the CDD provider needs to re-verify the individual or entity and attach a new CDD claim to their existing DID;")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/distribute/with-sdk/"},"distribute with the SDK")," for a reminder of the process.")),(0,o.kt)("p",null,"We assume the CDD service provider is named EzCdd and has a way to instantiate a Polymesh client."),(0,o.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,o.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const signingManagerEzCdd: LocalSigningManager =\n  await LocalSigningManager.create({\n    accounts: [\n      {\n        mnemonic: 'word51 word52 ...',\n      },\n    ],\n  });\n\nconst apiEzCdd: Polymesh = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerEzCdd,\n});\n"))),(0,o.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const signingManagerEzCdd = await LocalSigningManager.create({\n  accounts: [\n    {\n      mnemonic: 'word51 word52 ...',\n    },\n  ],\n});\n\nconst apiEzCdd = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerEzCdd,\n});\n")))),(0,o.kt)("h2",{id:"how-to-create-a-new-account"},"How to create a new account"),(0,o.kt)("p",null,"This part only applies if the user, say Bob, is brand new to Polymesh, or if Bob wants to create another account for himself."),(0,o.kt)("p",null,"In that case, the CDD provider needs to create an account. This is a privileged operation, too, one that only a CDD service provider can accomplish. The CDD provider needs to ask Bob for the public key, or address, he wishes to associate with the account."),(0,o.kt)("h3",{id:"information-collection"},"Information collection"),(0,o.kt)("p",null,"Bob creates a private key and returns the computed address. For instance:"),(0,o.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,o.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const bobAddress: string = '5ED27JHWh9dPVnhvRfazMRNqrfMgcAUdvgD7hs3969PBuxqe'; // For instance\n"))),(0,o.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const bobAddress = '5ED27JHWh9dPVnhvRfazMRNqrfMgcAUdvgD7hs3969PBuxqe'; // For instance\n")))),(0,o.kt)("p",null,"The provider needs to confirm that this key is not yet assigned to any other account."),(0,o.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,o.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const bobKeyInfo: Account = apiEzCdd.accountManagement.getAccount({\n  address: bobAddress,\n});\nconst bob: Identity = await bobKeyInfo.getIdentity();\nassert(bob === null);\n"))),(0,o.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const bobKeyInfo = apiEzCdd.accountManagement.getAccount({\n  address: bobAddress,\n});\nconst bob = await bobKeyInfo.getIdentity();\nassert(bob === null);\n")))),(0,o.kt)("h3",{id:"create-the-account"},"Create the account"),(0,o.kt)("p",null,"With the certainty that ",(0,o.kt)("strong",{parentName:"p"},"the key is not associated with any existing account"),", it is time to create a new account with this key:"),(0,o.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,o.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const newAccountQueue: TransactionQueue<Identity> =\n  await apiEzCdd.identities.registerIdentity({\n    targetAccount: bobAddress,\n  });\nconst bob: Identity = await newAccountQueue.run();\n"))),(0,o.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const newAccountQueue = await apiEzCdd.identities.registerIdentity({\n  targetAccount: bobAddress,\n});\nconst bob = await newAccountQueue.run();\n")))),(0,o.kt)("p",null,"So does Bob have a new account on-chain? Not yet, sadly. Or rather, fortunately. You see, it is worth repeating that all actions of consequence need approval on both ends, and this is no different here. Bob needs to use his private key to approve having it associated with this new account."),(0,o.kt)("p",null,"So, either Bob goes to his dashboard, and looks for incoming authorisation requests, or Bob fires up his own ",(0,o.kt)("inlineCode",{parentName:"p"},"apiBob")," and uses the SDK. We assume that EzCdd gave him their ",(0,o.kt)("inlineCode",{parentName:"p"},"const ezCddDid: string"),"."),(0,o.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,o.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const bobAccount: Account = apiBob.accountManagement.getSigningAccount();\nconst pendingAuthorizations: AuthorizationRequest[] =\n  await bobAccount.authorizations.getReceived();\nconst ezCddAuthorization: AuthorizationRequest = pendingAuthorizations.find(\n  (pendingAuthorization: AuthorizationRequest) => {\n    return pendingAuthorization.issuer.did === ezCddDid;\n  }\n);\nconst acceptQueue: TransactionQueue<void> = await ezCddAuthorization.accept();\nawait acceptQueue.run();\n"))),(0,o.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const bobAccount = apiBob.accountManagement.getSigningAccount();\nconst pendingAuthorizations = await bobAccount.authorizations.getReceived();\nconst ezCddAuthorization = pendingAuthorizations.find(\n  (pendingAuthorization) => {\n    return pendingAuthorization.issuer.did === ezCddDid;\n  }\n);\nconst acceptQueue = await ezCddAuthorization.accept();\nawait acceptQueue.run();\n")))),(0,o.kt)("p",null,"There is only a ",(0,o.kt)("em",{parentName:"p"},"slight problem")," with the above. Bob has not yet received his CDD attestation, and therefore cannot publish a transaction to the Polymesh network. So we showed the above to ",(0,o.kt)("em",{parentName:"p"},"stay in context"),", but really, Bob has to wait for the below CDD attestation to be published before he can approve, or reject, the account association."),(0,o.kt)("p",null,"Additionally, the address needs some POLYX to pay for transaction fees. Bob can get that by using the POLY to POLYX bridge, or he can have an agreement with EzCdd to send some to his address. Once again, only after the CDD attestation has been published."),(0,o.kt)("h2",{id:"the-cdd-attestation"},"The CDD attestation"),(0,o.kt)("p",null,"Before an account can transact on chain it requires a valid CDD claim to be added to the DID. The CDD provider constructs a transaction to add a claim type of ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomerDueDiligence")," providing Bob's DID as the target and an expiry date for the claim. The claim can include an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"cddId")," should the CDD provider wish to use it as a reference."),(0,o.kt)(u,{groupId:"code-language",mdxType:"Tabs"},(0,o.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const nextYear: Date = new Date();\nnextYear.setFullYear(nextYear.getFullYear() + 1);\nconst cddClaimQueue: TransactionQueue<void> = await apiEzCdd.claims.addClaims({\n  claims: [\n    {\n      claim: {\n        type: ClaimType.CustomerDueDiligence,\n        id: cddId,\n      },\n      target: bob.did,\n      expiry: nextYear,\n    },\n  ],\n});\nawait cddClaimQueue.run();\n"))),(0,o.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const nextYear = new Date();\nnextYear.setFullYear(nextYear.getFullYear() + 1);\nconst cddClaimQueue = await apiEzCdd.claims.addClaims({\n  claims: [\n    {\n      claim: {\n        type: ClaimType.CustomerDueDiligence,\n        id: cddId,\n      },\n      target: bob.did,\n      expiry: nextYear,\n    },\n  ],\n});\nawait cddClaimQueue.run();\n")))),(0,o.kt)("p",null,"With this transaction submitted Bob is now ",(0,o.kt)("em",{parentName:"p"},"CDD'd")," and can transact in materially-significant ways, including, as mentioned earlier by accepting the authorisation request."),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"We have seen how a CDD service provider needs to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"create new accounts on Polymesh, and"),(0,o.kt)("li",{parentName:"ul"},"publish CDD attestations.")),(0,o.kt)("h2",{id:"links"},"Links"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/sdk-docs/"},"SDK documents"))))}h.isMDXComponent=!0}}]);