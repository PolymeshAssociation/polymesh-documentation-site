"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[97697],{28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>o});var s=n(96540);const t={},a=s.createContext(t);function r(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:i},e.children)}},44416:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core-concepts/identity/identity-index","title":"Identity","description":"Identity Management on Polymesh","source":"@site/docs/200-core-concepts/030-identity/index.mdx","sourceDirName":"200-core-concepts/030-identity","slug":"/identity","permalink":"/polymesh-documentation-site/identity","draft":false,"unlisted":false,"editUrl":"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/200-core-concepts/030-identity/index.mdx","tags":[{"inline":true,"label":"identity","permalink":"/polymesh-documentation-site/tags/identity"},{"inline":true,"label":"management","permalink":"/polymesh-documentation-site/tags/management"}],"version":"current","frontMatter":{"title":"Identity","description":"Identity Management on Polymesh","id":"identity-index","slug":"/identity","sidebar_label":"Identity","tags":["identity","management"]},"sidebar":"docs","previous":{"title":"Tokenomics","permalink":"/polymesh-documentation-site/polyx/tokenomics"},"next":{"title":"Identity Verification","permalink":"/polymesh-documentation-site/identity/verification"}}');var t=n(74848),a=n(28453);const r={title:"Identity",description:"Identity Management on Polymesh",id:"identity-index",slug:"/identity",sidebar_label:"Identity",tags:["identity","management"]},o=void 0,d={},l=[{value:"Overview",id:"overview",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Identity Creation &amp; Verification",id:"identity-creation--verification",level:3},{value:"Asset Management",id:"asset-management",level:3},{value:"Claims &amp; Compliance",id:"claims--compliance",level:3},{value:"Key Management",id:"key-management",level:3},{value:"Access Control",id:"access-control",level:3},{value:"Identity Diagrams",id:"identity-diagrams",level:2},{value:"Identity Onboarding &amp; CDD",id:"identity-onboarding--cdd",level:3},{value:"Keys &amp; Accounts",id:"keys--accounts",level:3},{value:"Secondary Key Permissions",id:"secondary-key-permissions",level:3},{value:"Portfolios &amp; Asset Management",id:"portfolios--asset-management",level:3},{value:"Custody &amp; Portfolio Control",id:"custody--portfolio-control",level:3},{value:"Claims &amp; Compliance",id:"claims--compliance-1",level:3},{value:"Agent Permissions",id:"agent-permissions",level:3},{value:"Relayer &amp; Subsidized Keys",id:"relayer--subsidized-keys",level:3},{value:"Identity Structure: Primary &amp; Sub-Identities",id:"identity-structure-primary--sub-identities",level:3}];function c(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(i.p,{children:"Identity is at the core of Polymesh. All network participants must have an on-chain identity to interact with the blockchain and its assets."}),"\n",(0,t.jsx)(i.p,{children:"Each identity:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Is created through a ",(0,t.jsx)(i.a,{href:"/identity/verification",children:"Customer Due Diligence (CDD) process"})]}),"\n",(0,t.jsxs)(i.li,{children:["Is referenced by a pseudo-anonymous decentralized identifier (DID), e.g., ",(0,t.jsx)(i.code,{children:"0xfc0d2fc058d02c0a89c2cc2ff11726971dd39886a0b80ecfaa80fa3f196d65ce"})]}),"\n",(0,t.jsxs)(i.li,{children:["Can hold ",(0,t.jsx)(i.a,{href:"/core/assets",children:"assets"})," in associated ",(0,t.jsx)(i.a,{href:"/portfolios",children:"portfolios"}),", ",(0,t.jsx)(i.a,{href:"/compliance/#claims",children:"claims"}),", and ",(0,t.jsx)(i.a,{href:"/identity/roles",children:"permissioned roles"})]}),"\n",(0,t.jsxs)(i.li,{children:["Is controlled by a ",(0,t.jsx)(i.a,{href:"/identity/advanced/primary-keys",children:"primary key"})," and optional ",(0,t.jsx)(i.a,{href:"/identity/advanced/secondary-keys",children:"secondary keys"})]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,t.jsx)(i.h3,{id:"identity-creation--verification",children:"Identity Creation & Verification"}),"\n",(0,t.jsxs)(i.p,{children:["Identities are created through ",(0,t.jsx)(i.a,{href:"/identity/verification#cdd-service-providers",children:"permissioned CDD service providers"})," who verify user information, create an on-chain DID and issue CDD claims required for network access."]}),"\n",(0,t.jsx)(i.h3,{id:"asset-management",children:"Asset Management"}),"\n",(0,t.jsxs)(i.p,{children:["Native ",(0,t.jsx)(i.a,{href:"/core/assets",children:"assets"})," (excluding ",(0,t.jsx)(i.a,{href:"/polyx",children:"POLYX"}),") held by users are associated with their identities and can be organized into ",(0,t.jsx)(i.a,{href:"/portfolios",children:"portfolios"}),". Each identity can hold multiple assets and manage them through different portfolios. Identities may also be granted ",(0,t.jsx)(i.a,{href:"/asset-agents",children:"agent permissions"})," to perform specific operations on behalf of asset issuers."]}),"\n",(0,t.jsx)(i.h3,{id:"claims--compliance",children:"Claims & Compliance"}),"\n",(0,t.jsxs)(i.p,{children:["Identities can receive ",(0,t.jsx)(i.a,{href:"/compliance#claims",children:"claims"})," from other identities, which are used to enforce on-chain ",(0,t.jsx)(i.a,{href:"/compliance",children:"compliance rules"})," for assets. Claims have specific ",(0,t.jsx)(i.a,{href:"/compliance#claim-scopes",children:"scopes"})," and can be used to represent various attributes, such as KYC status or accreditation."]}),"\n",(0,t.jsx)(i.h3,{id:"key-management",children:"Key Management"}),"\n",(0,t.jsx)(i.p,{children:"Each identity has:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["A single ",(0,t.jsx)(i.a,{href:"/identity/advanced/secondary-keys#relationship-to-primary-key",children:"primary key"})," with full control"]}),"\n",(0,t.jsxs)(i.li,{children:["Optional ",(0,t.jsx)(i.a,{href:"/identity/advanced/secondary-keys",children:"secondary keys"})," with configurable permissions"]}),"\n",(0,t.jsxs)(i.li,{children:["Support for ",(0,t.jsx)(i.a,{href:"/identity/advanced/multisig",children:"multisig"})," keys as either primary or secondary keys"]}),"\n",(0,t.jsxs)(i.li,{children:["Support for ",(0,t.jsx)(i.a,{href:"/development/smart-contracts/",children:"smart contracts"})," as either primary or secondary keys"]}),"\n",(0,t.jsxs)(i.li,{children:["The ability to create ",(0,t.jsx)(i.a,{href:"/identity/advanced/child",children:"child identities"})]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Keys can also enter into a ",(0,t.jsx)(i.a,{href:"/accounts/subsidized/",children:"subsidized"})," relationship with another key, allowing the subsidizer to pay transaction fees on its behalf."]}),"\n",(0,t.jsx)(i.h3,{id:"access-control",children:"Access Control"}),"\n",(0,t.jsxs)(i.p,{children:["Polymesh provides robust ",(0,t.jsx)(i.a,{href:"/authorizations",children:"authorization"})," and ",(0,t.jsx)(i.a,{href:"/identity/advanced/secondary-keys#secondary-key-permissions",children:"permission"})," frameworks to manage access between identities and their keys."]}),"\n",(0,t.jsx)(i.h2,{id:"identity-diagrams",children:"Identity Diagrams"}),"\n",(0,t.jsxs)(i.p,{children:["The following diagrams help visualize and clarify the relationships between key aspects of on-chain identities in Polymesh. Each diagram focuses on a specific concept, such as ",(0,t.jsx)(i.a,{href:"/identity/verification",children:"Customer Due Diligence (CDD)"}),", ",(0,t.jsx)(i.a,{href:"/identity/advanced/secondary-keys",children:"primary and secondary keys"}),", ",(0,t.jsx)(i.a,{href:"/portfolios",children:"portfolios"}),", ",(0,t.jsx)(i.a,{href:"/portfolios/custody",children:"custody"}),", ",(0,t.jsx)(i.a,{href:"/compliance",children:"claims and compliance"}),", ",(0,t.jsx)(i.a,{href:"/asset-agents",children:"agent permissions"}),", ",(0,t.jsx)(i.a,{href:"/accounts/subsidized",children:"subsidized accounts"}),", and ",(0,t.jsx)(i.a,{href:"/identity/advanced/secondary-keys#secondary-key-permissions",children:"secondary key permissions"}),". For more details, see the linked documentation pages for each topic."]}),"\n",(0,t.jsx)(i.h3,{id:"identity-onboarding--cdd",children:"Identity Onboarding & CDD"}),"\n",(0,t.jsxs)(i.p,{children:["This diagram shows how a user is onboarded to Polymesh through a ",(0,t.jsx)(i.a,{href:"/identity/verification",children:"CDD (Customer Due Diligence) provider"}),", resulting in the creation of an on-chain identity and issuance of a ",(0,t.jsx)(i.a,{href:"/identity/verification#cdd-claims",children:"CDD claim"}),"."]}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    User["User"]\n    CDD["CDD Provider"]\n    OnboardID["Creates on-chain Identity ID"]\n    CDDClaim["Generates CDD claim<br/>and adds on-chain to Identity"]\n    User --\x3e|"Provides identity<br/>verification Data<br/>and primary signing key"| CDD\n    CDD --\x3e OnboardID\n    CDD --\x3e CDDClaim\n    OnboardID --\x3e MainDID["On-chain Identity (DID)"]\n    CDDClaim --\x3e MainDID'}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"keys--accounts",children:"Keys & Accounts"}),"\n",(0,t.jsxs)(i.p,{children:["This diagram shows how an identity (DID) is controlled by signing keys. Both the ",(0,t.jsx)(i.a,{href:"/identity/advanced/primary-keys",children:"primary key"})," and any number of optional ",(0,t.jsx)(i.a,{href:"/identity/advanced/secondary-keys",children:"secondary keys"}),' are grouped in a "Signing Keys" subgraph. Each key can be a standard signing key (SR25519, ED25519, or ECDSA), a ',(0,t.jsx)(i.a,{href:"/identity/advanced/multisig",children:"multisig"}),", or a ",(0,t.jsx)(i.a,{href:"/development/smart-contracts/",children:"smart contract"}),"."]}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    MainDID["On-chain Identity (DID)"]\n    POLYX["POLYX Balance"]\n    subgraph SG1 ["Signing Keys"]\n        direction TB\n        style SG1 stroke-dasharray: 4\n        PrimKey["Primary Key"]\n        SecKey["Secondary Key(s) (optional)"]\n    end\n    MainDID --\x3e SG1\n    POLYX --\x3e SG1\n    subgraph SG2 ["Allowed Key Types"]\n        direction TB\n        style SG2 stroke-dasharray: 4\n        StdKey["Standard Signing Key (SR25519/ED25519/ECDSA)"]\n        MultiSig["Multisig (m of n)"]\n        SmartContract["Smart Contract"]\n    end\n    PrimKey & SecKey --\x3e SG2\n    MultiSig --\x3e Signer1["Standard Signing Key (SR25519/ED25519/ECDSA)<br/>(No associated with a DID)"]'}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"secondary-key-permissions",children:"Secondary Key Permissions"}),"\n",(0,t.jsxs)(i.p,{children:["Secondary keys can be granted fine-grained ",(0,t.jsx)(i.a,{href:"/identity/advanced/secondary-keys#secondary-key-permissions",children:"permissions"}),", allowing them to perform only specific actions or access certain resources. Permissions can be scoped to:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Assets"}),": Restrict which assets the key can interact with (e.g., only certain tokens)."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Portfolios"}),": Restrict which portfolios the key can access or manage."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Transactions"}),": Restrict which types of transactions the key can sign (e.g., transfers, settlements, etc.)."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"The diagram below illustrates how secondary key permissions can be configured:"}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    SecKey["Secondary Key"]\n    Permissions["Permissions"]\n    SecKey --\x3e Permissions\n    Permissions --\x3e AssetPerms["Asset Permissions"]\n    Permissions --\x3e PortfolioPerms["Portfolio Permissions"]\n    Permissions --\x3e TxPerms["Transaction Permissions"]\n    AssetPerms --\x3e Asset1["Asset A"]\n    AssetPerms --\x3e Asset2["Asset B"]\n    PortfolioPerms --\x3e Portfolio1["Portfolio 1"]\n    PortfolioPerms --\x3e Portfolio2["Portfolio 2"]\n    TxPerms --\x3e Transfer["Settlement"]\n    TxPerms --\x3e Settle["Asset"]\n    TxPerms --\x3e OtherTx["Other Transaction Types"]'}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"portfolios--asset-management",children:"Portfolios & Asset Management"}),"\n",(0,t.jsxs)(i.p,{children:["This diagram demonstrates how an identity can have multiple ",(0,t.jsx)(i.a,{href:"/portfolios",children:"portfolios"})," (default, user, custodial) to organize and manage ",(0,t.jsx)(i.a,{href:"/core/assets",children:"assets"}),", including both fungible and non-fungible tokens."]}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    MainDID["On-chain Identity (DID)"]\n    DefPortfolio["Default Portfolio"]\n    UserPortfolio["User Portfolio"]\n    CustodialPortfolio["Custodial Portfolio"]\n    AddUserPortfolios["Additional User Portfolios"]\n    AssetA["Asset A"]\n    AssetB["Asset B"]\n    AssetC["Asset C"]\n    MainDID --\x3e DefPortfolio\n    MainDID --\x3e UserPortfolio\n    MainDID --\x3e AddUserPortfolios\n    MainDID --\x3e CustodialPortfolio\n    DefPortfolio --\x3e AssetA\n    UserPortfolio --\x3e AssetB\n    CustodialPortfolio --\x3e AssetC\n    AddUserPortfolios --\x3e AssetB\n    AddUserPortfolios --\x3e AssetC'}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"custody--portfolio-control",children:"Custody & Portfolio Control"}),"\n",(0,t.jsxs)(i.p,{children:["This diagram shows how portfolio ",(0,t.jsx)(i.a,{href:"/portfolios/custody",children:"control/custody"})," can be assigned to another identity (the custodian), who then controls the portfolio's assets."]}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    OwnerID["Owner Identity"]\n    CustodialPortfolio["Custodial Portfolio"]\n    CustodianID["Custodian Identity"]\n    CustodianKeys["Custodian Signing Keys"]\n    AssetA["Asset A"]\n    AssetB["Asset B"]\n\n    OwnerID --\x3e|"Owner retains beneficial ownership but cannot transfer"| CustodialPortfolio\n    CustodialPortfolio --\x3e AssetA\n    CustodialPortfolio --\x3e AssetB\n    CustodianID --\x3e|"Custodian has exclusive control of assets"| CustodialPortfolio\n    CustodianKeys --\x3e CustodianID'}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"claims--compliance-1",children:"Claims & Compliance"}),"\n",(0,t.jsxs)(i.p,{children:["This diagram illustrates how ",(0,t.jsx)(i.a,{href:"/compliance#claims",children:"claims"})," (such as KYC or accreditation) are issued to an identity by a claim issuer (e.g., a ",(0,t.jsx)(i.a,{href:"/identity/verification",children:"CDD provider"})," or another identity), and how they are used for ",(0,t.jsx)(i.a,{href:"/compliance",children:"compliance"})," purposes. Multiple claims from different issuers can be attached to a single identity and may be scoped to specific assets, identities or custom identifiers."]}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    MainDID["On-chain Identity (DID)"]\n    Claim1["KYC Claim<br/>Asset A"]\n    Claim2["Accreditation Claim<br/>Asset A"]\n    Claim3["KYC Claim<br/>Asset B"]\n    Claim4["Jurisdiction Claim<br/>Asset B"]\n    ClaimIssuer["Claim Issuer 1"]\n    ClaimIssuer2["Claim Issuer 2"]\n    ClaimIssuer --\x3e|"Issues"| Claim1\n    ClaimIssuer --\x3e|"Issues"| Claim2\n    ClaimIssuer2 --\x3e|"Issues"| Claim3\n    ClaimIssuer2 --\x3e|"Issues"| Claim4\n    Claim1 --\x3e MainDID\n    Claim2 --\x3e MainDID\n    Claim3 --\x3e MainDID\n    Claim4 --\x3e MainDID'}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"agent-permissions",children:"Agent Permissions"}),"\n",(0,t.jsxs)(i.p,{children:["This diagram shows how an identity can grant ",(0,t.jsx)(i.a,{href:"/asset-agents",children:"agent permissions"})," to another identity, allowing the agent to act on behalf of the original identity for specific assets or operations. The asset issuer is an agent for its own asset by default."]}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    MainDID["On-chain Identity (DID)"]\n    AgentID["Agent Identity"]\n    Asset["Asset"]\n    MainDID --\x3e|"Owns and controls<br/>(Issuer is an agent by default)"| Asset\n    MainDID --\x3e|"Grants agent permission"| AgentID\n    AgentID --\x3e|"Acts on behalf of issuer"| Asset'}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"relayer--subsidized-keys",children:"Relayer & Subsidized Keys"}),"\n",(0,t.jsxs)(i.p,{children:["This diagram shows how a ",(0,t.jsx)(i.a,{href:"/accounts/subsidized",children:"relayer"})," can subsidize transaction fees for a signing key (not directly for an identity), allowing another key (owned by a relayer identity) to pay fees on behalf of a key. The relayer's key may be under a different identity than the subsidized key."]}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    MainDID["On-chain Identity (DID)"]\n    KeyToSubsidize["Key to be Subsidized"]\n    MainDID --\x3e KeyToSubsidize\n    RelayerID["Relayer Identity"]\n    RelayerKey["Relayer Signing Key"]\n    RelayerID --\x3e RelayerKey\n    KeyToSubsidize -.->|"Transaction fees subsidized by"| RelayerKey\n    MainDID -.->|"Can be the same identity"| RelayerID'}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"identity-structure-primary--sub-identities",children:"Identity Structure: Primary & Sub-Identities"}),"\n",(0,t.jsxs)(i.p,{children:["This diagram illustrates the relationship between a primary on-chain identity and its ",(0,t.jsx)(i.a,{href:"/identity/advanced/child",children:"sub-identities (child identities)"}),", including inheritance of ",(0,t.jsx)(i.a,{href:"/identity/verification#cdd-claims",children:"CDD claims"}),"."]}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TD\n    MainDID["On-chain Identity (DID)"]\n    SubDID["Sub-Identity (DID)"]\n    AddSubDID["Additional Sub-Identities"]\n    MainDID --\x3e SubDID\n    MainDID --\x3e AddSubDID\n    SubDID -.->|"Inherits CDD claim"| MainDID'})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);