"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[13807],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=s(n),y=o,d=u["".concat(p,".").concat(y)]||u[y]||f[y]||i;return n?r.createElement(d,c(c({ref:t},l),{},{components:n})):r.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=y;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[u]="string"==typeof e?e:o,c[1]=a;for(var s=2;s<i;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},63713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const i={id:"AccountTypeInfo",title:"Interface: AccountTypeInfo",sidebar_label:"AccountTypeInfo"},c=void 0,a={unversionedId:"interfaces/API/Entities/Account/Types/AccountTypeInfo/AccountTypeInfo",id:"version-20.1.x/interfaces/API/Entities/Account/Types/AccountTypeInfo/AccountTypeInfo",title:"Interface: AccountTypeInfo",description:"api/entities/Account/types.AccountTypeInfo",source:"@site/sdk-docs_versioned_docs/version-20.1.x/interfaces/API/Entities/Account/Types/AccountTypeInfo/AccountTypeInfo.md",sourceDirName:"interfaces/API/Entities/Account/Types/AccountTypeInfo",slug:"/interfaces/API/Entities/Account/Types/AccountTypeInfo/",permalink:"/sdk-docs/interfaces/API/Entities/Account/Types/AccountTypeInfo/",draft:!1,tags:[],version:"20.1.x",frontMatter:{id:"AccountTypeInfo",title:"Interface: AccountTypeInfo",sidebar_label:"AccountTypeInfo"},sidebar:"defaultSidebar",previous:{title:"MultiSigDetails",permalink:"/sdk-docs/interfaces/API/Entities/Account/MultiSig/Types/MultiSigDetails/"},next:{title:"MultiSigDetails",permalink:"/sdk-docs/interfaces/API/Entities/Account/Types/MultiSigDetails/"}},p={},s=[{value:"Properties",id:"properties",level:2},{value:"keyType",id:"keytype",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"relation",id:"relation",level:3},{value:"Defined in",id:"defined-in-1",level:4}],l={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/sdk-docs/modules/API/Entities/Account/Types/"},"api/entities/Account/types"),".AccountTypeInfo"),(0,o.kt)("p",null,"The type of account, and its relation to an Identity"),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"keytype"},"keyType"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("strong",{parentName:"p"},"keyType"),": ",(0,o.kt)("a",{parentName:"p",href:"/sdk-docs/enums/API/Entities/Account/Types/AccountKeyType/"},(0,o.kt)("inlineCode",{parentName:"a"},"AccountKeyType"))),(0,o.kt)("p",null,"The type of Account"),(0,o.kt)("h4",{id:"defined-in"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/F-OBrien/polymesh-sdk/blob/012f1745/src/api/entities/Account/types.ts#L57"},"api/entities/Account/types.ts:57")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"relation"},"relation"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("strong",{parentName:"p"},"relation"),": ",(0,o.kt)("a",{parentName:"p",href:"/sdk-docs/enums/API/Entities/Account/Types/AccountIdentityRelation/"},(0,o.kt)("inlineCode",{parentName:"a"},"AccountIdentityRelation"))),(0,o.kt)("p",null,"How or if the account is associated to an Identity"),(0,o.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/F-OBrien/polymesh-sdk/blob/012f1745/src/api/entities/Account/types.ts#L61"},"api/entities/Account/types.ts:61")))}u.isMDXComponent=!0}}]);