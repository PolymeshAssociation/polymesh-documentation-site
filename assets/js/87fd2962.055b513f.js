"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[33668],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var d=n.createContext({}),c=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(r),l=s,f=p["".concat(d,".").concat(l)]||p[l]||u[l]||a;return r?n.createElement(f,i(i({ref:t},m),{},{components:r})):n.createElement(f,i({ref:t},m))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=l;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[p]="string"==typeof e?e:s,i[1]=o;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},19994:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(87462),s=(r(67294),r(3905));const a={id:"AddAssetRequirementParams",title:"Interface: AddAssetRequirementParams",sidebar_label:"AddAssetRequirementParams"},i="Interface: AddAssetRequirementParams",o={unversionedId:"interfaces/API/Procedures/Types/AddAssetRequirementParams/AddAssetRequirementParams",id:"interfaces/API/Procedures/Types/AddAssetRequirementParams/AddAssetRequirementParams",title:"Interface: AddAssetRequirementParams",description:"api/procedures/types.AddAssetRequirementParams",source:"@site/sdk-docs/interfaces/API/Procedures/Types/AddAssetRequirementParams/AddAssetRequirementParams.md",sourceDirName:"interfaces/API/Procedures/Types/AddAssetRequirementParams",slug:"/interfaces/API/Procedures/Types/AddAssetRequirementParams/",permalink:"/polymesh-documentation-site/sdk-docs/interfaces/API/Procedures/Types/AddAssetRequirementParams/",draft:!1,tags:[],version:"current",frontMatter:{id:"AddAssetRequirementParams",title:"Interface: AddAssetRequirementParams",sidebar_label:"AddAssetRequirementParams"},sidebar:"defaultSidebar",previous:{title:"UniqueIdentifiers",permalink:"/polymesh-documentation-site/sdk-docs/interfaces/API/Entities/Venue/UniqueIdentifiers/"},next:{title:"AddClaimsParams",permalink:"/polymesh-documentation-site/sdk-docs/interfaces/API/Procedures/Types/AddClaimsParams/"}},d={},c=[{value:"Properties",id:"properties",level:2},{value:"conditions",id:"conditions",level:3},{value:"Defined in",id:"defined-in",level:4}],m={toc:c};function p(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"interface-addassetrequirementparams"},"Interface: AddAssetRequirementParams"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/polymesh-documentation-site/sdk-docs/modules/API/Procedures/Types/"},"api/procedures/types"),".AddAssetRequirementParams"),(0,s.kt)("h2",{id:"properties"},"Properties"),(0,s.kt)("h3",{id:"conditions"},"conditions"),(0,s.kt)("p",null,"\u2022 ",(0,s.kt)("strong",{parentName:"p"},"conditions"),": ",(0,s.kt)("a",{parentName:"p",href:"/polymesh-documentation-site/sdk-docs/modules/Types/#inputcondition"},(0,s.kt)("inlineCode",{parentName:"a"},"InputCondition")),"[]"),(0,s.kt)("p",null,"array of conditions that form the requirement that must be added.\nConditions within a requirement are ",(0,s.kt)("em",{parentName:"p"},"AND")," between them. This means that in order\nfor a transfer to comply with this requirement, it must fulfill ",(0,s.kt)("em",{parentName:"p"},"ALL")," conditions"),(0,s.kt)("h4",{id:"defined-in"},"Defined in"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/polymesh-sdk/blob/15be87e8/src/api/procedures/types.ts#L560"},"api/procedures/types.ts:560")))}p.isMDXComponent=!0}}]);