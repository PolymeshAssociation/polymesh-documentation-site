"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[6257],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=p(n),c=a,m=h["".concat(l,".").concat(c)]||h[c]||u[c]||r;return n?o.createElement(m,i(i({ref:t},d),{},{components:n})):o.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={title:"Running a Node with Docker",description:"",subsite:"polymesh-docs"},i="Running a Polymesh Node with Docker",s={unversionedId:"network/running-a-node-docker",id:"network/running-a-node-docker",title:"Running a Node with Docker",description:"",source:"@site/polymesh-docs/network/running-a-node-docker.mdx",sourceDirName:"network",slug:"/network/running-a-node-docker",permalink:"/polymesh-documentation-site/polymesh-docs/network/running-a-node-docker",draft:!1,tags:[],version:"current",frontMatter:{title:"Running a Node with Docker",description:"",subsite:"polymesh-docs"},sidebar:"defaultSidebar",previous:{title:"POLYX Token",permalink:"/polymesh-documentation-site/polymesh-docs/network/polyx"},next:{title:"Tokenomics",permalink:"/polymesh-documentation-site/polymesh-docs/network/tokenomics"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Getting the Polymesh Image",id:"getting-the-polymesh-image",level:2},{value:"Running a node",id:"running-a-node",level:2},{value:"Creating a Volume for Persistent Storage",id:"creating-a-volume-for-persistent-storage",level:2},{value:"Running a Node as a Non Root User",id:"running-a-node-as-a-non-root-user",level:2},{value:"Naming your Node and Container",id:"naming-your-node-and-container",level:2},{value:"Automatically Restarting your Node",id:"automatically-restarting-your-node",level:2},{value:"Exposing Container Ports (Libp2p, RPC, WS &amp; Prometheus)",id:"exposing-container-ports-libp2p-rpc-ws--prometheus",level:2},{value:"Bridged Network",id:"bridged-network",level:3},{value:"Host Network",id:"host-network",level:3},{value:"Purging Chain Database",id:"purging-chain-database",level:2},{value:"Running an Operator Node",id:"running-an-operator-node",level:2},{value:"Generating Node Session Keys",id:"generating-node-session-keys",level:2}],d={toc:p};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"running-a-polymesh-node-with-docker"},"Running a Polymesh Node with Docker"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Docker is an open source containerization platform which allows developers to pack, ship, and run any application as a lightweight, portable, self-sufficient container."),(0,a.kt)("p",null,"For convenience the Polymesh Association offers precompiled Docker container images of Polymesh. These images allow a user to quickly deploy the Polymesh software and it's dependencies. Prebuilt container image can be fetched from the ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/polymeshassociation/polymesh/tags"},"Polymesh Association Docker Hub repository"),". The Polymesh Association also published a sample ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/polymesh-tools/tree/main/docker-compose"},"Docker-Compose file")," which can be used to quickly deploy a Polymesh node as part of a multi container environment. The use of Docker Compose is not covered in this guide."),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Following examples are run on the Polymesh testnet chain without SSL. They can be used to quick start and learn how Polymesh can be configured. Please find out how to secure your node, if you want to operate it on the internet. Do not expose RPC and WS ports, if they are not correctly configured."))),(0,a.kt)("hr",null),(0,a.kt)("p",null,"This guide was written based on Ubuntu 20.04, but the instructions should be similar for other platforms and assumes Docker is already installed. If Docker is not yet installed follow the official ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/ubuntu/"},"docker installation instructions")," to install. This guide assumes you are logged in as a non-root user with sudo privileges. For security it is recommended root user login is disabled."),(0,a.kt)("p",null,"For additional information related to docker commands refer to ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/run/"},"Docker Docs"),"."),(0,a.kt)("h2",{id:"getting-the-polymesh-image"},"Getting the Polymesh Image"),(0,a.kt)("p",null,"Images are available for mainnet, testnet, staging and develop chains. There are two flavours available for each: debian and distroless. The distroless version has no shell and thus provides a reduced attack surface, whereas the debian versions shell can help with debugging during the initial setup. The images are tagged with <version",">","-<chain",">","-<flavour",">","."),(0,a.kt)("p",null,"The version, chain and flavour are required for mainnet and testnet chains to ensure deterministic versioning. For staging and develop the version can be omitted. When omitted docker will pull the latest release for that chain and flavour combination."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note: The specified Docker container health checks will not work with the distroless image, but it's more lightweight and safer.")),(0,a.kt)("p",null,"Refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/polymeshassociation/polymesh/tags"},"Polymesh Association Docker Hub repository")," for the available release tags. Your desired release tag can be pulled with the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker pull polymeshassociation/polymesh:5.0.2-testnet-distroless\n")),(0,a.kt)("p",null,"The tag ",(0,a.kt)("inlineCode",{parentName:"p"},":5.0.2-testnet-distroless")," should be replaced with the desired release tag."),(0,a.kt)("p",null,"The Polymesh Association does not publish a ",(0,a.kt)("inlineCode",{parentName:"p"},":latest")," build. If a release tag is omitted the docker pull command will error."),(0,a.kt)("p",null,"By default, if the Polymesh container image has not previously been pulled from the repository, it will be pulled when first attempting to run it. You can verify the version installed by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run --rm polymeshassociation/polymesh:5.0.2-testnet-distroless --version\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"All available Polymesh ","[FLAGS]",", ","[OPTIONS]"," and <SUBCOMMAND",">"," commands can be viewed by calling:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run --rm polymeshassociation/polymesh:5.0.2-testnet-distroless --help\n")),(0,a.kt)("h2",{id:"running-a-node"},"Running a node"),(0,a.kt)("p",null,"With the image downloaded you can now run your first testnet node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run -u root --rm -it polymeshassociation/polymesh:5.0.2-testnet-distroless --chain testnet\n")),(0,a.kt)("p",null,"Note: the above command is required to be run as the root user with the flag ",(0,a.kt)("inlineCode",{parentName:"p"},"-u")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--user root")," in order for the user to have suitable permissions to successfully run the node."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"--rm")," is used to automatically remove the container when it exits."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"-it")," is used to allocate an interactive, tty virtual terminal session for the container process. This allows node logs to be displayed. When you are satisfied with the configuration of your docker run command and node you can replace ",(0,a.kt)("inlineCode",{parentName:"p"},"-it")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"-d")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--detach")," to start a container in detached mode so it runs in the background."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"--chain testnet")," is used to run a node on the ",(0,a.kt)("inlineCode",{parentName:"p"},"testnet")," blockchain. Replacing ",(0,a.kt)("inlineCode",{parentName:"p"},"testnet")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"mainnet")," would result in a node being created for the Polymesh mainnet blockchain. It can also be one of the predefined ones (",(0,a.kt)("inlineCode",{parentName:"p"},"dev"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"local"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"staging"),")"),(0,a.kt)("p",null,"To stop the running container first open a new terminal window. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo docker ps")," to identify the Docker container ID or name for the running Polymesh container. The container is then stopped with the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker stop <CONTAINER ID or NAME>\n")),(0,a.kt)("p",null,"Alternatively, Ctrl+C will stop the running container."),(0,a.kt)("h2",{id:"creating-a-volume-for-persistent-storage"},"Creating a Volume for Persistent Storage"),(0,a.kt)("p",null,"When the container was stopped all records of it are automatically removed. This is not what you want for a live blockchain node. If you want chain information to persist you need to define a local volume on the operating system that the container will write to. In this example we will use ",(0,a.kt)("inlineCode",{parentName:"p"},"/var/lib/polymesh/"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir /var/lib/polymesh/\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n-u root \\\n--rm -it \\\n--volume=/var/lib/polymesh/:/var/lib/polymesh/ \\\npolymeshassociation/polymesh:5.0.2-testnet-distroless \\\n--chain testnet \\\n--base-path /var/lib/polymesh/\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"--base-path")," Specifies a directory where the Polymesh container should store all the data related to this chain. (If it is omitted the default base path is ",(0,a.kt)("inlineCode",{parentName:"p"},"/.local/share/polymesh/")," and the container volume address should be updated to bind to this location)"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"-v")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--volume=<HOST VOLUME:CONTAINER VOLUME>")," is used to bind mount the volume."),(0,a.kt)("p",null,"Now when stopping the container and starting a new one the blockchain information persists and the node will recommence syncing the chain where it previously stopped."),(0,a.kt)("h2",{id:"running-a-node-as-a-non-root-user"},"Running a Node as a Non Root User"),(0,a.kt)("p",null,"So far your nodes have been run as the root user. For security it is advised to run the container as a non-root user. This section will cover the steps required to run a container as a non-root user. In this section you will create a system user, with no home directory and no login capabilities called ",(0,a.kt)("inlineCode",{parentName:"p"},"polymesh")," and run the Polymesh container as that user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo useradd -r -M -s /usr/sbin/nologin polymesh\n")),(0,a.kt)("p",null,"Before you run your node you need to ensure this new user has ownership of the storage directory and all file within. This step is essential or the node will fail to run due to permission errors."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown polymesh:polymesh /var/lib/polymesh/ -R\n")),(0,a.kt)("p",null,"Now that your system user has ownership of your storage volume you can run the node. To do this you will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"-u")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--user")," Docker flag. As the \u201cpolymesh\u201d user does not exist in the container we must instead specify the UID (user ID) and GID (group ID) for this user explicitly. In the below example ",(0,a.kt)("inlineCode",{parentName:"p"},"$(id -u polymesh)")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$(id -g polymesh)")," return the UID and GID for the polymesh user. Alternatively, they could be specified explicitly e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"--user 999:999")," if those are the UID and GID assigned to the polymesh user:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n--user $(id -u polymesh):$(id -g polymesh) \\\n--rm -it \\\n--volume=/var/lib/polymesh/:/var/lib/polymesh/ \\\npolymeshassociation/polymesh:5.0.2-testnet-distroless \\\n--chain testnet \\\n--base-path /var/lib/polymesh/\n")),(0,a.kt)("h2",{id:"naming-your-node-and-container"},"Naming your Node and Container"),(0,a.kt)("p",null,"By default, Polymesh assigns a random node name. This can be seen in the node log upon startup. e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"Node name: elastic-scarecrow-5175"),". Similarly, Docker assigns a random name to the container running the node. For ease of identification users can optionally assign a custom name of their choice for both, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--name <name>")," flag as shown in this example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n--name my-container-name \\\n--user $(id -u polymesh):$(id -g polymesh) \\\n--rm -it \\\n--volume=/var/lib/polymesh/:/var/lib/polymesh/ \\\npolymeshassociation/polymesh:5.0.2-testnet-distroless \\\n--chain testnet \\\n--name my-node-name \\\n--base-path /var/lib/polymesh/\n")),(0,a.kt)("p",null,"The above command runs a Docker container called ",(0,a.kt)("inlineCode",{parentName:"p"},"my-container-name")," and a Polymesh node called ",(0,a.kt)("inlineCode",{parentName:"p"},"my-node-name"),". The name can be arbitrary, but there is a character limit."),(0,a.kt)("p",null,"Note - the name assigned for the node will be publicly visible in the telemetry sent to Polymesh's servers. (Telemetry is enabled by default). Once your node is running it should appear in the chain telemetry which can be found at the ",(0,a.kt)("a",{parentName:"p",href:"https://stats.polymesh.network/"},"Polymesh Telemetry Page"),"."),(0,a.kt)("p",null,"The Docker container can now be addressed by name. For example, to stop the node you can run the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker stop my-container-name\n")),(0,a.kt)("h2",{id:"automatically-restarting-your-node"},"Automatically Restarting your Node"),(0,a.kt)("p",null,"Your node should automatically restart in the case of an intermittent failure. This may be a server restart or crash of the Docker container. To achieve this, you will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--restart")," flag. The recommended restart policy is ",(0,a.kt)("inlineCode",{parentName:"p"},"always"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n--name my-container-name \\\n--user $(id -u polymesh):$(id -g polymesh) \\\n--restart always \\\n-it \\\n--volume=/var/lib/polymesh/:/var/lib/polymesh/ \\\npolymeshassociation/polymesh:5.0.2-testnet-distroless \\\n--chain testnet \\\n--name my-node-name \\\n--base-path /var/lib/polymesh/\n")),(0,a.kt)("p",null,"In the above example we have replaced the ",(0,a.kt)("inlineCode",{parentName:"p"},"--rm")," flag with ",(0,a.kt)("inlineCode",{parentName:"p"},"--restart always"),". To confirm the restart policy is correctly configured you can reboot your server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo reboot\n")),(0,a.kt)("p",null,"While the server is rebooting your node will no longer be displayed on the Polymesh telemetry page, after it has restarted it will reappear. Following restart, you can also run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker ps\n")),(0,a.kt)("p",null,"to confirm your container is listed as running."),(0,a.kt)("p",null,"On Debian and Ubuntu, the Docker service is configured to start on boot by default. If the container does not restart automatically you may need to review your configuration for both ",(0,a.kt)("inlineCode",{parentName:"p"},"docker.service")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"containerd.service")),(0,a.kt)("p",null,"If you wish to stop your node you can use the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker stop my-container-name\n")),(0,a.kt)("p",null,"Note: as the restart flag is configured as ",(0,a.kt)("inlineCode",{parentName:"p"},"always")," should the server be rebooted the node will restart. If you no longer want your node to restart, you need to either remove the container or update the container restart policy."),(0,a.kt)("p",null,"To remove the container:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker rm my-container-name\n")),(0,a.kt)("p",null,"To update the container restart policy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker update --restart=no my-container-name\n")),(0,a.kt)("h2",{id:"exposing-container-ports-libp2p-rpc-ws--prometheus"},"Exposing Container Ports (Libp2p, RPC, WS & Prometheus)"),(0,a.kt)("p",null,"There are 4 main ports you may wish to expose for your node, depending on your application. You should only expose ports you require."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Libp2p \u2013 The port that your node will listen for p2p traffic on. Default port: 30333. The default libp2p port can be overridden using the ",(0,a.kt)("inlineCode",{parentName:"li"},"--port <PORT>")," flag on your Polymesh instance. This should always be exposed for both your container and your firewall to ensure your node is able to sync with the chain."),(0,a.kt)("li",{parentName:"ol"},"Remote Procedure Calls \u2013 The port that your node will listen for incoming RPC traffic on. Default port: 9933. A custom HTTP RPC server TCP port can be specified using the ",(0,a.kt)("inlineCode",{parentName:"li"},"--rpc-port <PORT>")," flag on your Polymesh instance."),(0,a.kt)("li",{parentName:"ol"},"WebSocket \u2013 The port that your node will listen for incoming WebSocket traffic on. Default = 9944. A custom WebSockets RPC server TCP port can be specified using the ",(0,a.kt)("inlineCode",{parentName:"li"},"--ws-port <PORT>")," flag on your Polymesh instance."),(0,a.kt)("li",{parentName:"ol"},"Prometheus \u2013 By default Polymesh exposes an endpoint which serves metrics in the ",(0,a.kt)("a",{parentName:"li",href:"https://prometheus.io/docs/concepts/data_model/"},"Prometheus exposition format"),". Default port: 9615. You can change the port with ",(0,a.kt)("inlineCode",{parentName:"li"},"--prometheus-port <PORT>"),". Prometheus metrics can be disabled with the flag ",(0,a.kt)("inlineCode",{parentName:"li"},"--no-prometheus"))),(0,a.kt)("h3",{id:"bridged-network"},"Bridged Network"),(0,a.kt)("p",null,"By default, a Docker container creates a separate network stack which is bridged to the host network (",(0,a.kt)("inlineCode",{parentName:"p"},"--network=bridge"),"). An IP address will be allocated for containers on the bridge's network and traffic will be routed through this bridge to the container. To communicate with the container network the required ports must be exposed. Ports are exposed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"-p")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--publish")," flag in the format <hostPort",">",":<containerPort",">",". It is best practice to only expose required ports. E.g. add ",(0,a.kt)("inlineCode",{parentName:"p"},"-p 30333:30333")," to the Docker run command to expose the libp2p port."),(0,a.kt)("p",null,"The default configuration for RPC, WS and Prometheus is to allow traffic from localhost only. As, by default, Docker creates a separate network from the host network, connections from local host will be refused even if the required ports are published. To allow the host system to communicate with the containerized Polymesh instance, the ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-external"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--ws-external")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--prometheus-external")," flags must be added as applicable. Additionally, for RPC & WS connections the ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-cors <ORIGINS>")," flag should be added, Where, <ORIGINS",">"," is a comma separated list of origins (protocol://domain e.g. ",(0,a.kt)("a",{parentName:"p",href:"https://mainnet-app.polymesh.network/"},"https://mainnet-app.polymesh.network/"),") allowed to access the HTTP & WS RPC server. Value of ",(0,a.kt)("inlineCode",{parentName:"p"},"all")," will disable origin validation. When running in --dev mode the default is to allow all origins."),(0,a.kt)("p",null,"Note: adding these flags allows access from outside your host network. Ensure your firewall is configured to allow or block traffic on these ports as required. If running an ",(0,a.kt)("a",{parentName:"p",href:"#running-an-operator-node"},"operator node")," it is not recommended to expose RPC and WS externally."),(0,a.kt)("p",null,"Example of node configuration with exposed container ports to allow access from host localhost or WAN:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n--name my-container-name \\\n--user $(id -u polymesh):$(id -g polymesh) \\\n--rm \\\n-it \\\n--volume=/var/lib/polymesh/:/var/lib/polymesh/ \\\n-p 30333:30333 \\\n-p 9933:9933 \\\n-p 9944:9944 \\\n-p 9615:9615 \\\npolymeshassociation/polymesh:5.0.2-testnet-distroless \\\n--chain testnet \\\n--name my-node-name \\\n--base-path /var/lib/polymesh/ \\\n--rpc-external \\\n--rpc-cors all \\\n--ws-external \\\n--prometheus-external\n")),(0,a.kt)("h3",{id:"host-network"},"Host Network"),(0,a.kt)("p",null,"An alternate option is to use the host's network stack inside the container. With the ",(0,a.kt)("inlineCode",{parentName:"p"},"--network")," flag set to ",(0,a.kt)("inlineCode",{parentName:"p"},"host")," a container will share the host's network stack and all interfaces from the host will be available to the container. Compared to the default bridge mode, the host mode gives significantly better networking performance since it uses the host's native networking stack whereas the bridge has to go through one level of virtualization through the Docker daemon."),(0,a.kt)("p",null,"Warning: ",(0,a.kt)("inlineCode",{parentName:"p"},"--network=host")," gives the container full access to local system services and is therefore considered insecure. This option should be used with caution."),(0,a.kt)("p",null,"Example of Docker node configuration with --network=host:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n--name my-container-name \\\n--user $(id -u polymesh):$(id -g polymesh) \\\n--rm \\\n-it \\\n--volume=/var/lib/polymesh/:/var/lib/polymesh/ \\\n--network=host \\\npolymeshassociation/polymesh:5.0.2-testnet-distroless \\\n--chain testnet \\\n--name my-node-name \\\n--base-path /var/lib/polymesh/\n")),(0,a.kt)("p",null,"A benefit of this option is the node can be addressed directly from localhost on the host environment without exposing RPC and WebSocket externally. For example, calling:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -H "Content-Type: application/json" -d \'{"id":1, "jsonrpc":"2.0", "method": "system_localPeerId"}\' http://localhost:9933/\n')),(0,a.kt)("p",null,"will now return the Peer ID of the node."),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Note: Not all RPC methods are safe to be exposed publicly. The default RPC methods exposed depends on the node configuration. In both of the previous two examples we did not explicitly specify the RPC methods to expose, therefore it defaulted to ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-methods Auto"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"Auto"),": Acts as ",(0,a.kt)("inlineCode",{parentName:"p"},"Safe")," if RPC is served externally, e.g. when ",(0,a.kt)("inlineCode",{parentName:"p"},"--{rpc,ws}-external")," is passed, otherwise acts as ",(0,a.kt)("inlineCode",{parentName:"p"},"Unsafe"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"Unsafe"),": Exposes every RPC method. ",(0,a.kt)("inlineCode",{parentName:"p"},"Safe"),": Exposes only a safe subset of RPC methods, denying unsafe RPC methods. Disabled RPC methods include ",(0,a.kt)("inlineCode",{parentName:"p"},"author_hasKey"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"author_hasSessionKeys"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"author_insertKey"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"author_removeExtrinsic"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"author_rotateKeys"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"babe_epochAuthorship"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"childstate_getStorageSize"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"offchain_localStorageGet"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"offchain_localStorageSet"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"state_getPairs"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"state_queryStorage"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"state_queryStorageAt"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sync_state_genSyncSpec"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"system_addLogFilter"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"system_dryRun"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"system_dryRunAt")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"system_resetLogFilter"),"."),(0,a.kt)("p",null,"The two previous node configuration examples result in different RPC methods being exposed. In the second example with ",(0,a.kt)("inlineCode",{parentName:"p"},"--network=host")," it is possible to call an unsafe rpc method such as ",(0,a.kt)("inlineCode",{parentName:"p"},"author_rotateKeys")," which is not possible for first example with ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-external")," configured. External unsafe methods can also be forced by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-methods Unsafe")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--unsafe-rpc-external")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--unsafe-ws-external")," as required."),(0,a.kt)("h2",{id:"purging-chain-database"},"Purging Chain Database"),(0,a.kt)("p",null,"On occasions you may wish to purge your blockchain database. For example, you wish to remove partial files created as a result of stopping and starting your node or if you are changing your node to an operator node and wish to change the database ",(0,a.kt)("inlineCode",{parentName:"p"},"--pruning")," mode. In that instance you will need to either resync from scratch or restore a database backup from a node with the same pruning settings. However, before resyncing the chain you will first need to stop your running node, remove the stopped docker container and purge existing database. (refer to stop and remove commands in the ",(0,a.kt)("a",{parentName:"p",href:"#automatically-restarting-your-node"},"Automatically Restarting your Node")," section)"),(0,a.kt)("p",null,"Once your container is stopped and removed (if you are not restarting with the same configuration) the data base can be purged with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n-u $(id -u polymesh):$(id -g polymesh) \\\n--rm -it \\\n-v /var/lib/polymesh/:/var/lib/polymesh/ \\\npolymeshassociation/polymesh:5.0.2-testnet-distroless \\\npurge-chain \\\n--chain testnet  \\\n--base-path /var/lib/polymesh/\n")),(0,a.kt)("p",null,"You will be presented with a prompt to confirm you wish to remove the database which you need to confirm."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Are you sure to remove "/var/lib/polymesh/chains/testnet/db"? [y/N]: y\n"/var/lib/polymesh/chains/testnet/db" removed.\n')),(0,a.kt)("p",null,"Ensure your command specifies the correct ",(0,a.kt)("inlineCode",{parentName:"p"},"--base-path"),", volumes and ",(0,a.kt)("inlineCode",{parentName:"p"},"--chain")," for the database you wish to remove."),(0,a.kt)("h2",{id:"running-an-operator-node"},"Running an Operator Node"),(0,a.kt)("p",null,"The Operator role on Polymesh is permissioned. Operators must be regulated capital market participants that meet specific criteria and be approved by Polymesh Governance. For more information on becoming an operator visit the ",(0,a.kt)("a",{parentName:"p",href:"https://polymesh.network/node-operators"},"Polymesh Website")),(0,a.kt)("p",null,"In the previous examples we did not explicitly state the ",(0,a.kt)("inlineCode",{parentName:"p"},"--pruning")," mode for the nodes. The default database for a ",(0,a.kt)("strong",{parentName:"p"},"full node")," is pruned: it discards all finalized blocks older than a configurable number except the genesis block: This is 256 blocks from the last finalized one, by default. A node that is pruned this way requires much less space than an archive node."),(0,a.kt)("p",null,"The default ",(0,a.kt)("inlineCode",{parentName:"p"},"--pruning")," mode for an operator node is ",(0,a.kt)("inlineCode",{parentName:"p"},"archive"),". An ",(0,a.kt)("strong",{parentName:"p"},"archive node")," keeps all the past blocks. An archive node makes it convenient to query the past state of the chain at any point in time. Finding out what an account's balance at a certain block was, or which extrinsics resulted in a certain state change are fast operations when using an archive node. However, an archive node takes up a lot of disk space."),(0,a.kt)("p",null,"If first running a non-operator node to sync the chain, prior to changing to an operator node, the pruning mode should explicitly be configured as ",(0,a.kt)("inlineCode",{parentName:"p"},"--pruning archive"),". Alternatively, the database must be ",(0,a.kt)("a",{parentName:"p",href:"#purging-chain-database"},"purged")," prior to starting the operator node."),(0,a.kt)("p",null,"To run a node as an operator the ",(0,a.kt)("inlineCode",{parentName:"p"},"--operator")," flag must be added to the node configuration. Below is an example of node configured as an operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n--name my-container-name \\\n--user $(id -u polymesh):$(id -g polymesh) \\\n--restart always \\\n-it \\\n--volume=/var/lib/polymesh/:/var/lib/polymesh/ \\\n-p 30333:30333 \\\n-p 9615:9615 \\\n--ulimit nofile=1024:10240 \\\npolymeshassociation/polymesh:5.0.2-testnet-distroless \\\n--chain testnet \\\n--operator \\\n--name my-node-name \\\n--base-path /var/lib/polymesh/ \\\n--wasm-execution compiled \\\n--db-cache 4096 \\\n--prometheus-external\n")),(0,a.kt)("p",null,"While it is strongly recommended to run an operator node with pruning configured as ",(0,a.kt)("inlineCode",{parentName:"p"},"archive"),", this is not essential. To reduce the size of the database alternative pruning can be considered provided the operator understands the potential risks (e.g. chain reorg greater than the number of blocks stored). To set custom pruning use the flag ",(0,a.kt)("inlineCode",{parentName:"p"},"--pruning")," followed by the number of blocks to keep. e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"--pruning 30000")," will only keep 30,000 blocks. When running an operator node and setting pruning to anything other than ",(0,a.kt)("inlineCode",{parentName:"p"},"archive"),", you must additionally set the ",(0,a.kt)("inlineCode",{parentName:"p"},"--unsafe-pruning")," flag."),(0,a.kt)("h2",{id:"generating-node-session-keys"},"Generating Node Session Keys"),(0,a.kt)("p",null,"Session keys are the keys that an operator node uses to sign data needed for consensus. Session keys are typically generated in the client, although they don't have to be, and are stored on the operator node itself. Session keys are not meant to control funds and should only be used for their intended purpose. They can be used to perform actions that will result in a penalty, like double signing. Hence, it is important to keep these keys secure. They can be changed regularly."),(0,a.kt)("p",null,"Polymesh uses four session keys:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"GRANDPA: ed25519"),(0,a.kt)("li",{parentName:"ul"},"BABE: sr25519"),(0,a.kt)("li",{parentName:"ul"},"I'm Online: sr25519"),(0,a.kt)("li",{parentName:"ul"},"Authority Discovery: sr25519")),(0,a.kt)("p",null,"These keys can either be generated offline and injected in the operator node or can be generated within the operator node by calling the appropriate RPC method. Once generated the session keys should be persisted."),(0,a.kt)("p",null,"The official Polymesh docker images contain a small binary to generate the session keys and insert them in the keystore. This is the simplest method to generate session keys as it does not require exposing unsafe rpc methods externally or the installation of curl either in the container itself or in a sidecar."),(0,a.kt)("p",null,"This binary is located in /usr/local/bin/rotate and when executed will produce a string containing the concatenated public session keys used for signing operator transactions. The binary can be run on a running container with the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker exec -u $(id -u polymesh):$(id -g polymesh) my-container-name /usr/local/bin/rotate\n0xb10d37dd9a0df59b128788e9620491143230e3f5459951108e1767fd1c79558c82f719fa0060b90e5f9414acdd5f593e72c5714c4ca6de0d5b99f137e14a0c5944e1805cc6b4226291a5e7dcb437d775a3af715c30009688515c9bd1f4941570b64d0f96063afce278393f18a1aa4d56fd1decd085b38c6577ee9d8a9d78bf64\n")),(0,a.kt)("p",null,"Take note of the string generated by your command: it contains the public portion of your session keys that you will use to link your Polymesh key to your node. The private keys output is stored in a keystore on your operator server e.g. in the ",(0,a.kt)("inlineCode",{parentName:"p"},"/<base path>/chains/testnet/keystore/")," directory."),(0,a.kt)("p",null,"After you have generated your session keys refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/PolymeshAssociation/polymesh-tools/tree/main/docs/operator#bonding-polyx"},"Polymesh Operator Guide")," for steps required to bond POLYX, set session keys and activate your operator node. ",(0,a.kt)("strong",{parentName:"p"},"Ensure you wait before activating your operator node until all your nodes are be fully synced with the chain.")))}h.isMDXComponent=!0}}]);