"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[68396],{11704:(e,s,i)=>{i.d(s,{A:()=>n});const n=i.p+"assets/images/compliance_rule_construction-94340e01c1ae6a063224d009b68ceea3.png"},28453:(e,s,i)=>{i.d(s,{R:()=>c,x:()=>a});var n=i(96540);const t={},r=n.createContext(t);function c(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(r.Provider,{value:s},e.children)}},59612:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"core-concepts/compliance/compliance-index","title":"Compliance","description":"Rules and Restrictions","source":"@site/docs/200-core-concepts/050-compliance/index.mdx","sourceDirName":"200-core-concepts/050-compliance","slug":"/compliance","permalink":"/polymesh-documentation-site/compliance","draft":false,"unlisted":false,"editUrl":"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/200-core-concepts/050-compliance/index.mdx","tags":[{"inline":true,"label":"compliance","permalink":"/polymesh-documentation-site/tags/compliance"},{"inline":true,"label":"rules","permalink":"/polymesh-documentation-site/tags/rules"}],"version":"current","frontMatter":{"title":"Compliance","description":"Rules and Restrictions","id":"compliance-index","slug":"/compliance","sidebar_label":"Compliance","tags":["compliance","rules"]},"sidebar":"docs","previous":{"title":"Security Token Offerings","permalink":"/polymesh-documentation-site/sto"},"next":{"title":"Transfer Restrictions","permalink":"/polymesh-documentation-site/compliance/transfer-restrictions"}}');var t=i(74848),r=i(28453);const c={title:"Compliance",description:"Rules and Restrictions",id:"compliance-index",slug:"/compliance",sidebar_label:"Compliance",tags:["compliance","rules"]},a=void 0,l={},o=[{value:"Overview",id:"overview",level:2},{value:"Claims",id:"claims",level:2},{value:"Compliance Rules",id:"compliance-rules",level:2},{value:"Condition Types",id:"condition-types",level:3},{value:"Trusted Claim Issuers",id:"trusted-claim-issuers",level:2},{value:"Claim Scopes",id:"claim-scopes",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Transfer Restrictions",id:"transfer-restrictions",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"Polymesh enforces compliant asset transfers through on-chain rules based on identity claims. Asset issuers, or their appointed agent, define which claims (such as KYC, accreditation, or jurisdiction) and which claim issuers are required to be present or absent for transfers to be permitted. These rules ensure that only eligible participants can hold or transfer assets, and are checked automatically by the blockchain."}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(s.p,{children:["Compliance on Polymesh is managed by the on-chain ",(0,t.jsx)(s.strong,{children:"Compliance Manager"})," module. Asset issuers (or their agents) can define, update, pause, or reset compliance requirements (rules) for their assets. Each rule specifies which identity ",(0,t.jsx)(s.a,{href:"#claims",children:"claims"}),", ",(0,t.jsx)(s.a,{href:"#trusted-claim-issuers",children:"claim issuers"}),", and ",(0,t.jsx)(s.a,{href:"#claim-scopes",children:"claim scopes"})," are required for transfers, and can apply to senders, receivers, or both."]}),"\n",(0,t.jsxs)(s.p,{children:["Compliance is enforced through a set of requirements (rules) attached to each asset. Each requirement consists of one or more conditions that must be satisfied by the sender, receiver, or both. ",(0,t.jsx)(s.strong,{children:"If all conditions within at least one rule are satisfied, the transfer is allowed."})," Rules are evaluated automatically during every transfer, ensuring that only permitted transactions are executed."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Key concepts:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Multiple ",(0,t.jsx)(s.strong,{children:"rules"})," can be defined per asset. Each rule can have multiple sender and receiver conditions."]}),"\n",(0,t.jsx)(s.li,{children:"Conditions are based on claims held by identities, such as KYC, accreditation, jurisdiction, or custom claims."}),"\n",(0,t.jsx)(s.li,{children:"Asset issuers can specify which identities are trusted to issue claims for compliance purposes."}),"\n",(0,t.jsx)(s.li,{children:"Rules can specify the required scope for claims (e.g., asset-specific, identity-specific, or custom)."}),"\n",(0,t.jsx)(s.li,{children:"Claims can have expiry dates, and lockup claims can restrict transfers until a specified time."}),"\n",(0,t.jsx)(s.li,{children:"Support for custom claim types and custom claim scopes."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"claims",children:"Claims"}),"\n",(0,t.jsxs)(s.p,{children:["Compliance rules are built on top of the Polymesh claims system. ",(0,t.jsx)(s.strong,{children:"Claims"}),' are attestations made by one identity about another, such as "is accredited" or "is from jurisdiction X." Claims are added on-chain using the ',(0,t.jsx)(s.code,{children:"identity::add_claim"})," extrinsic from the identity pallet."]}),"\n",(0,t.jsx)(s.p,{children:"Claims can be:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Standard types:"})," Accredited, Affiliate, Buy Lockup, Sell Lockup, Know Your Customer, Jurisdiction, Exempted, Blocked, and Custom.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["The ",(0,t.jsx)(s.code,{children:"Jurisdiction"})," claim takes an additional country code parameter, indicating the user's jurisdiction."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Custom types:"})," Asset issuers can define and use custom claim types for specialized compliance needs."]}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"CustomerDueDiligence"})," (CDD) is a special claim type only issued by permissioned CDD service providers. See ",(0,t.jsx)(s.a,{href:"/identity/verification",children:"Identity Verification"}),". This is not typically used in compliance rules."]})}),"\n",(0,t.jsx)(s.p,{children:"Each claim has:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Scope:"})," Specifies what the claim applies to (an asset, an identity, or a custom value)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Expiry:"})," (Optional) date after which the claim is no longer valid. When used in conjunction with ",(0,t.jsx)(s.code,{children:"Buy Lockup"})," and ",(0,t.jsx)(s.code,{children:"Sell Lockup"})," claims, an expiry can prevent investors from buying or selling an asset until after the expiry date of the respective claim."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Issuer:"})," The identity that issued the claim."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Claim Types",src:i(91122).A+"",width:"1518",height:"544"})}),"\n",(0,t.jsx)(s.h2,{id:"compliance-rules",children:"Compliance Rules"}),"\n",(0,t.jsx)(s.p,{children:"Compliance rules are structured as follows:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Rules:"})," Each asset can have multiple rules. At least one rule must be satisfied for a transfer to be allowed (logical OR between rules)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Conditions:"})," Each rule can have multiple sender and/or receiver conditions. All conditions within a rule must be satisfied (logical AND between conditions)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Condition Types:"})," Conditions specify the type of claim, the required scope, and (optionally) the trusted claim issuer(s)."]}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"If no compliance requirements are set for an asset, all transfers are allowed by default."})}),"\n",(0,t.jsx)(s.p,{children:"The diagram below illustrates how compliance rules are constructed on Polymesh:"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Compliance Rule Construction",src:i(11704).A+"",width:"1638",height:"2549"})}),"\n",(0,t.jsx)(s.p,{children:"Asset issuers can specify multiple rules for their asset. Each rule includes conditions that either the sender or receiver must satisfy. If the conditions for any rule are met by both parties in a transaction, the transfer leg can proceed."}),"\n",(0,t.jsx)(s.p,{children:"Each compliance rule's conditions (for both sender and receiver) must be satisfied, although condition lists can be empty. For example, if the sender conditions are blank, all asset holders can send the token without restriction, provided the receiver satisfies the specified receiver conditions."}),"\n",(0,t.jsxs)(s.p,{children:["An asset issuer can also pause compliance on their asset, enabling all transfer legs to execute upon affirmation. Pausing compliance may benefit certain assets, like stablecoins, where the issuer may not wish to impose transfer restrictions. This is managed using the ",(0,t.jsx)(s.code,{children:"pause_asset_compliance"})," and ",(0,t.jsx)(s.code,{children:"resume_asset_compliance"})," extrinsics."]}),"\n",(0,t.jsx)(s.h3,{id:"condition-types",children:"Condition Types"}),"\n",(0,t.jsxs)(s.p,{children:["Each condition within a rule defines a specific requirement (typically ",(0,t.jsx)(s.a,{href:"#claims",children:"claim"})," related) that must be met. The main condition types are:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"IsPresent:"})," Requires that a specific claim (and optionally scope and issuer) is present for the sender or receiver."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"IsAbsent:"})," Requires that a specific claim is not present."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"IsAnyOf:"})," Requires that at least one claim from a specified set is present."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"IsNoneOf:"})," Requires that none of a specified set of claims are present."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"IsIdentity:"})," Requires that the sender or receiver is a specific identity (by DID) or is an ",(0,t.jsx)(s.a,{href:"/asset-agents",children:"ExternalAgent"})," of the asset. This condition does not rely on claims, but instead checks for a direct match to a specified identity or agent relationship. For example, this can be used to exempt the asset issuer or a designated agent from other transfer requirements."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"IsIdentity"})," condition supports two options:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Specific:"})," The sender or receiver must have a specific Decentralized Identifier (DID)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"ExternalAgent:"})," The sender or receiver must be an agent of the asset (see ",(0,t.jsx)(s.a,{href:"/asset-agents",children:"Asset Agents & Permissions"}),")."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"These condition types can be combined within rules to create complex, fine-grained compliance logic."}),"\n",(0,t.jsx)(s.p,{children:"If any compliance rule is satisfied in a transfer leg, compliance is considered complete, allowing asset issuers to create complex rule sets that ensure asset compliance."}),"\n",(0,t.jsx)(s.p,{children:"For example, the following rule set requires only a single rule to be satisfied (OR logic between rules):"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Rule 1 - sender does not have a sell lockup scoped to the asset, from the asset issuer; receiver has a KYC claim and is not in the U.S., with claims scoped to the asset or issuer identity and from the issuer's KYC partner."}),"\n",(0,t.jsx)(s.li,{children:"Rule 2 - sender does not have a sell lockup scoped to the asset, from the asset issuer; receiver has a KYC claim and an Accredited claim, scoped to the asset or issuer identity and from the issuer's KYC partner."}),"\n",(0,t.jsx)(s.li,{children:"Rule 3 - sender's identity is an agent of the asset, with no receiver conditions."}),"\n",(0,t.jsx)(s.li,{children:"Rule 4 - no sender restriction; receiver's identity is an agent of the asset."}),"\n",(0,t.jsx)(s.li,{children:"Rule 5 - no sender restriction; receiver has an Exempted claim scoped to the asset from the asset issuer."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"trusted-claim-issuers",children:"Trusted Claim Issuers"}),"\n",(0,t.jsxs)(s.p,{children:["While any identity can issue a claim, asset issuers can specify which identities are considered ",(0,t.jsx)(s.strong,{children:"trusted claim issuers"})," for compliance purposes. There are two ways to define trusted claim issuers:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Default trusted claim issuers:"})," Set at the asset level, these are used whenever a rule does not specify a claim issuer for a condition. Asset-level defaults are managed using the ",(0,t.jsx)(s.code,{children:"complianceManager::add_default_trusted_claim_issuer"})," and ",(0,t.jsx)(s.code,{children:"complianceManager::remove_default_trusted_claim_issuer"})," extrinsics. When adding a default trusted claim issuer, issuers can specify which claim types the issuer is trusted for, or indicate that the issuer is trusted for all claim types."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Rule-defined trusted claim issuers:"})," Specified directly within a compliance rule condition for a particular claim type or condition. These take precedence over the asset-level defaults for that rule. Rule-defined trusted claim issuers can also be set for specific claim types or for all claim types within the rule, providing granular control over which issuers are accepted for each compliance condition."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Only claims from trusted claim issuers (either default or rule-defined, and for the relevant claim type) will be considered valid for satisfying compliance rules. This allows issuers to:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Accept claims only from themselves or approved KYC providers"}),"\n",(0,t.jsx)(s.li,{children:"Restrict certain claim types to specific issuers (e.g., only accept Affiliate claims from the asset issuer)"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"If a rule does not specify a trusted claim issuer for a claim, the default trusted claim issuers for the asset are used automatically."}),"\n",(0,t.jsx)(s.h2,{id:"claim-scopes",children:"Claim Scopes"}),"\n",(0,t.jsxs)(s.p,{children:["Scopes can be considered as a way to group claims. Each claim has a ",(0,t.jsx)(s.strong,{children:"scope"})," that determines what it applies to:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Asset scope:"})," The claim is specific to a unique asset ID."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Identity scope:"})," The claim applies to a specific identity."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Custom scope:"})," Arbitrary value for specialized use cases."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Compliance rules can specify which claim scopes are accepted for each condition."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Examples:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["A claim scoped to the ",(0,t.jsx)(s.code,{children:"ACME"})," asset UUID (e.g., ",(0,t.jsx)(s.code,{children:"12345678-1234-1234-1234-123456123456"}),") allows the claim to be used with rules that only accept claims scoped to this asset, offering the highest level of control over identity claims."]}),"\n",(0,t.jsxs)(s.li,{children:["A claim scoped to the ",(0,t.jsx)(s.code,{children:"ACME Co."})," identity (issuer of ",(0,t.jsx)(s.code,{children:"ACME-A"}),", ",(0,t.jsx)(s.code,{children:"ACME-B"}),", and ",(0,t.jsx)(s.code,{children:"ACME-C"}),") enables reuse of identity claims across multiple assets. Here, claim issuers can issue a single KYC claim scoped to the identity rather than multiple asset-specific claims."]}),"\n",(0,t.jsxs)(s.li,{children:["A custom scope such as ",(0,t.jsx)(s.code,{children:"ACME Exchange"})," could apply to claims issued by the ACME Exchange for all onboarded account holders. If an asset issuer lists their token on the ACME Exchange and accepts the exchange as a trusted issuer, the issuer can permit exchange account holders to trade the token by recognizing the exchange's custom scope in compliance rules."]}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"Identity claim scopes are required to match a condition claim scope to satisfy a condition. However, an Asset type or Identity type claim does not need to match the specific asset or identity involved in the transfer. All scopes should be considered as a way to group claims and can be reused across multiple assets."})}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsx)(s.p,{children:"Just because a trusted issuer has issued, for example, a KYC claim on Polymesh, it does not necessarily mean that the KYC was performed to the same requirements as those of a particular asset issuer. Claim issuers may perform KYC for many issuers, each with different standards. Scoping provides a way for issuers to group and recognize only those claims that they are confident meet their own requirements."})}),"\n",(0,t.jsx)(s.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,t.jsx)(s.p,{children:"Key on-chain extrinsics (dispatchable functions) in the Compliance Manager module include:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"add_compliance_requirement"}),": Add a new compliance rule to an asset."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"remove_compliance_requirement"}),": Remove a rule from an asset."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"add_default_trusted_claim_issuer"}),": Add a default trusted claim issuer for an asset."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"remove_default_trusted_claim_issuer"}),": Remove a default trusted claim issuer for an asset."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"reset_asset_compliance"}),": Remove all rules for an asset."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"pause_asset_compliance"}),": Pause compliance checks for an asset."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"resume_asset_compliance"}),": Resume compliance checks for an asset."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"replace_asset_compliance"}),": Replace the entire set of compliance rules for an asset (not just a single rule)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"change_compliance_requirement"}),": Change the conditions of an existing compliance rule for an asset."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"These extrinsics are available via the Polymesh runtime and can be called by asset owners or their appointed agents."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"transfer-restrictions",children:"Transfer Restrictions"}),"\n",(0,t.jsx)(s.p,{children:"Polymesh also supports protocol-level transfer restrictions for fungible assets, such as limits on the number of holders, maximum ownership percentages, and claim-based caps. These restrictions are enforced automatically and can be used alongside compliance rules for additional control."}),"\n",(0,t.jsxs)(s.p,{children:["For details and configuration options, see the ",(0,t.jsx)(s.a,{href:"/compliance/transfer-restrictions",children:"Transfer Restrictions"})," page."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},91122:(e,s,i)=>{i.d(s,{A:()=>n});const n=i.p+"assets/images/claim_construction-38240c80b466b6bab7fa8dac28c13b1f.png"}}]);