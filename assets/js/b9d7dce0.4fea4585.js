"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[97286],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(n),m=i,f=c["".concat(l,".").concat(m)]||c[m]||p[m]||o;return n?a.createElement(f,r(r({ref:t},u),{},{components:n})):a.createElement(f,r({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},60264:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_position:5,title:"With the SDK",description:"Settlement with the Polymesh SDK",slug:"/settlement/sdk/"},r=void 0,s={unversionedId:"settlement/settlement-sdk",id:"settlement/settlement-sdk",title:"With the SDK",description:"Settlement with the Polymesh SDK",source:"@site/docs/05-settlement/settlement-sdk.mdx",sourceDirName:"05-settlement",slug:"/settlement/sdk/",permalink:"/docs/settlement/sdk/",draft:!1,editUrl:"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/05-settlement/settlement-sdk.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"With the SDK",description:"Settlement with the Polymesh SDK",slug:"/settlement/sdk/"},sidebar:"defaultSidebar",previous:{title:"External Agents",permalink:"/docs/settlement/settlement-agents/"},next:{title:"Settlement Example App",permalink:"/docs/settlement/example-app/"}},l={},d=[{value:"Participants",id:"participants",level:2},{value:"Alice&#39;s trading portfolio",id:"alices-trading-portfolio",level:2},{value:"US dollar?",id:"us-dollar",level:2},{value:"Future compliance issue?",id:"future-compliance-issue",level:2},{value:"Further processes",id:"further-processes",level:2},{value:"NextDaq create the instruction",id:"nextdaq-create-the-instruction",level:2},{value:"The custodians approve",id:"the-custodians-approve",level:2},{value:"The instruction is executed",id:"the-instruction-is-executed",level:2},{value:"The exchange verifies",id:"the-exchange-verifies",level:2},{value:"Custodian&#39;s risk",id:"custodians-risk",level:2},{value:"Conclusion",id:"conclusion",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},c=u("Tabs"),p=u("TabItem"),m={toc:d};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When distributing the ACME token, we used a ",(0,i.kt)("strong",{parentName:"p"},"settlement instruction"),". This is the proper Polymesh construct to allow a transfer of a security token. The instruction we used had a single leg, i.e. it had a single action. Here we are going to use the same construct, with more legs."),(0,i.kt)("h2",{id:"participants"},"Participants"),(0,i.kt)("p",null,"Here, Alice, the individual, wants to start trading and exchange some of her ACME shares for US dollars. For that, she enlists the services of a broker named SafeHands who has access to an exchange named NextDaq. She plans on instructing SafeHands to list 1,000 of her shares for at least 5 USD apiece, and let them handle the reception of USD and the transfer execution in a timely manner."),(0,i.kt)("p",null,"Like we saw before, each participant has an identity and a computer on which they can instantiate their Polymesh client. And inform each other off-chain of their respective ",(0,i.kt)("inlineCode",{parentName:"p"},"did")," so they know how to identify, target, and respond to each other."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Alice:")),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const signingManagerAlice: LocalSigningManager =\n  await LocalSigningManager.create({\n    accounts: [\n      {\n        mnemonic: 'word1 word2 ...',\n      },\n    ],\n  });\n\nconst apiAlice: Polymesh = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerAlice,\n});\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const signingManagerAlice = await LocalSigningManager.create({\n  accounts: [\n    {\n      mnemonic: 'word1 word2 ...',\n    },\n  ],\n});\n\nconst apiAlice = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerAlice,\n});\n")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SafeHands:")),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const signingManagerSafeHands: LocalSigningManager =\n  await LocalSigningManager.create({\n    accounts: [\n      {\n        mnemonic: 'word41 word42 ...',\n      },\n    ],\n  });\nconst apiSafeHands: Polymesh = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerSafeHands,\n});\nconst safeHands: Identity = await apiSafeHands.getSigningIdentity();\nconst safeHandsDid: string = safeHands.did; // For Alice and NextDaq\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const signingManagerSafeHands = await LocalSigningManager.create({\n  accounts: [\n    {\n      mnemonic: 'word41 word42 ...',\n    },\n  ],\n});\nconst apiSafeHands = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerSafeHands,\n});\nconst safeHands = await apiSafeHands.getSigningIdentity();\nconst safeHandsDid = safeHands.did; // For Alice and NextDaq\n")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NextDaq:")),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const signingManagerNextDaq: LocalSigningManager =\n  await LocalSigningManager.create({\n    accounts: [\n      {\n        mnemonic: 'word51 word52 ...',\n      },\n    ],\n  });\nconst apiNextDaq: Polymesh = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  signingManager: signingManagerNextDaq,\n});\nconst nextDaq: Identity = await apiNextDaq.getSigningIdentity();\nconst nextDaqDid: string = nextDaq.did; // For SafeHands\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const apiNextDaq = await Polymesh.connect({\n  nodeUrl: 'wss://testnet-rpc.polymesh.live', // or your preferred node\n  accountMnemonic: 'word51 word52 ...',\n});\nconst nextDaq: Identity = await apiNextDaq.getSigningIdentity();\nconst nextDaqDid: string = nextDaq.did; // For SafeHands\n")))),(0,i.kt)("h2",{id:"alices-trading-portfolio"},"Alice's trading portfolio"),(0,i.kt)("p",null,"We saw earlier that Alice kept her ACME shares in her portfolio named ",(0,i.kt)("em",{parentName:"p"},"Cold store"),", with id ",(0,i.kt)("inlineCode",{parentName:"p"},"coldStoreId"),". It was not meant for trading. But since she wants to trade part of it, she is going to separate her concerns by:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Creating a new ",(0,i.kt)("em",{parentName:"li"},"Trading")," portfolio.")),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const tradingFolioQueue: TransactionQueue<NumberedPortfolio> =\n  await apiAlice.identities.createPortfolio({\n    name: 'Trading',\n  });\nconst tradingFolio: NumberedPortfolio = await tradingFolioQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const tradingFolioQueue = await apiAlice.identities.createPortfolio({\n  name: 'Trading',\n});\nconst tradingFolio = await tradingFolioQueue.run();\n")))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Now, let her move 1,000 of her ACME tokens.")),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const coldStore: NumberedPortfolio = await alice.portfolios.getPortfolio({\n  portfolioId: new BigNumber(coldStoreId),\n});\nconst moveQueue: TransactionQueue<void> = await coldStore.moveFunds({\n  items: [\n    {\n      asset: 'ACME',\n      amount: new BigNumber('1000'),\n    },\n  ],\n  to: tradingFolio,\n});\nawait moveQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const coldStore = await alice.portfolios.getPortfolio({\n  portfolioId: new BigNumber(coldStoreId),\n});\nconst moveQueue = await coldStore.moveFunds({\n  items: [\n    {\n      asset: 'ACME',\n      amount: new BigNumber('1000'),\n    },\n  ],\n  to: tradingFolio,\n});\nawait moveQueue.run();\n")))),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"She did this, not for cosmetic reasons, but because she also intends to give SafeHands custodial rights on this Trading portfolio. And only this one.")),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const custodyQueue: TransactionQueue<void> = await tradingFolio.setCustodian({\n  targetIdentity: safeHandsDid,\n});\nawait custodyQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const custodyQueue = await tradingFolio.setCustodian({\n  targetIdentity: safeHandsDid,\n});\nawait custodyQueue.run();\n")))),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"She cannot just dump it on SafeHands, though. They have to accept the custodial relationship in return. So let's move to SafeHands computer system and accept it.")),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const pendingAuthorizations: AuthorizationRequest[] =\n  await safeHands.authorizations.getReceived();\nconst custodialAuthorization: AuthorizationRequest = pendingAuthorizations.find(\n  (pendingAuthorization: AuthorizationRequest) => {\n    return pendingAuthorization.issuer.did === aliceDid;\n  }\n);\nconst acceptQueue: TransactionQueue<void> =\n  await custodialAuthorization.accept();\nawait acceptQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const pendingAuthorizations = await safeHands.authorizations.getReceived();\nconst custodialAuthorization = pendingAuthorizations.find(\n  (pendingAuthorization) => {\n    return pendingAuthorization.issuer.did === aliceDid;\n  }\n);\nconst acceptQueue = await custodialAuthorization.accept();\nawait acceptQueue.run();\n")))),(0,i.kt)("p",null,"At this point, Alice can simply interact with SafeHands on their platform, and direct them to what she wants to achieve. Her broker could also choose to display in her account that she has entrusted them with 1,000 ACME shares, to keep her informed of the status of her account."),(0,i.kt)("h2",{id:"us-dollar"},"US dollar?"),(0,i.kt)("p",null,"We are going to use an on-chain representation of the US dollar. It can be as conceptually simple as another security token issued by a bank. Let's name our bank DeepPockets, and have them issue the token named DEEPUSD."),(0,i.kt)("p",null,"DeepPockets happens to have a sterling reputation, so Polymesh network participants believe them when they claim that they will honour anyone wishing to redeem its DEEPUSD token against off-chain USD 1 for 1. This setup is convenient as, later on, it will allow the trade to have all its components on chain."),(0,i.kt)("p",null,"Additionally, Alice is not interested in this DEEPUSD. This is a ",(0,i.kt)("em",{parentName:"p"},"detail")," that her broker is going to hide away from her. Instead, SafeHands will own the DEEPUSD on-chain while Alice's account will display that she owns USD. And if she decides to withdraw them, then she would quite naturally provide banking details to SafeHands ",(0,i.kt)("em",{parentName:"p"},"as per usual"),"."),(0,i.kt)("p",null,"SafeHands will collect all DEEPUSD in its own identity's default portfolio."),(0,i.kt)("h2",{id:"future-compliance-issue"},"Future compliance issue?"),(0,i.kt)("p",null,"We already know that when Alice eventually sells some ACME shares, the instruction will need for compliance to be satisfied on her side before it gets executed. One cannot predict the future. But SafeHands, mindful of maintaining its reputation with NextDaq, still wants to confirm that, were it to happen today, Alice could send her shares."),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const acmeAsset: Asset = await apiSafeHands.assets.getAsset({\n  ticker: 'ACME',\n});\nconst transfer: TransferBreakdown = await acmeAsset.settlements.canTransfer({\n  amount: new BigNumber('1'),\n  from: {\n    did: aliceDid,\n    id: tradingFolio.id,\n  },\n  to: aliceDid,\n});\nassert(transfer.result === true);\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const acmeAsset = await apiSafeHands.assets.getAsset({\n  ticker: 'ACME',\n});\nconst transfer = await acmeAsset.settlements.canTransfer({\n  amount: new BigNumber('1'),\n  from: {\n    did: aliceDid,\n    id: tradingFolio.id,\n  },\n  to: aliceDid,\n});\nassert(transfer.result === true);\n")))),(0,i.kt)("p",null,"This test will unfortunately also test whether Alice can receive new ACME shares, which is one irrelevant hurdle SafeHands doesn't care about."),(0,i.kt)("p",null,"If SafeHands, or any other custodian, have a customer who wants to acquire some ACME shares, they would have to make sure that they satisfy the ",(0,i.kt)("em",{parentName:"p"},"receive")," part of the compliance. If you recall, it was defined as:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Have a KYC claim. As per the exercise from ACME itself, which is an artefact of keeping the exercise simpler, although it could be from any KYC service provider as per ACME's choice. Let's name it EzKyc. Presumably a provider that is tasked with verifying the customer's jurisdiction so as to meaningfully satisfy the second point;"),(0,i.kt)("li",{parentName:"ol"},"Not have a claimed jurisdiction of Liechtenstein.")),(0,i.kt)("p",null,"What would it look like if EzKyc were to publish a claim against Bob, with DID of ",(0,i.kt)("inlineCode",{parentName:"p"},"bobDid"),", valid for 1 year, for the purpose of receiving ACME tokens?"),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const nextYear: Date = new Date();\nnextYear.setFullYear(nextYear.getFullYear() + 1);\nconst claimQueue: TransactionQueue<void> = await apiEzKyc.claims.addClaims({\n  claims: [\n    {\n      claim: {\n        type: ClaimType.Jurisdiction,\n        code: CountryCode.Gb,\n        scope: {\n          type: ScopeType.Ticker,\n          value: 'ACME',\n        },\n      },\n      expiry: nextYear,\n      target: bobDid,\n    },\n  ],\n});\nawait claimQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const nextYear = new Date();\nnextYear.setFullYear(nextYear.getFullYear() + 1);\nconst claimQueue = await apiEzKyc.claims.addClaims({\n  claims: [\n    {\n      claim: {\n        type: 'Jurisdiction',\n        code: 'Gb',\n        scope: {\n          type: 'Ticker',\n          value: 'ACME',\n        },\n      },\n      expiry: nextYear,\n      target: bobDid,\n    },\n  ],\n});\nawait claimQueue.run();\n")))),(0,i.kt)("p",null,"This action is done by EzKyc, not by SafeHands or any other custodian. Although it is conceivable that said custodians would direct their customers to the actions they need to complete before they can move forward."),(0,i.kt)("h2",{id:"further-processes"},"Further processes"),(0,i.kt)("p",null,"Ok, now Alice has set up her portfolio for trading, gave a green light to SafeHands and received one from them. Time to wave our hands about the next off-chain steps that take place:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Alice informs SafeHands that they should list her shares for 5 USD a piece;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"SafeHands turn to NextDaq and list them for sale on her behalf. NextDaq return an order id to SafeHands, ",(0,i.kt)("inlineCode",{parentName:"p"},"aliceOrderId"),", for both parties to keep as a reference;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"There happens to be an interested buying party, Bob, for 200 shares at 5 USD a piece;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Bob is represented by his custodian OnTrust, who received the order id ",(0,i.kt)("inlineCode",{parentName:"p"},"bobOrderId")," when they listed his order;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Bob has also prepared a trading portfolio;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"NextDaq match SafeHands and OnTrust for a trade of 200 shares at 5 USD a piece;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"NextDaq remove Bob's order and dock 200 ACME from Alice's standing order;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"NextDaq send ",(0,i.kt)("inlineCode",{parentName:"p"},"aliceOrderId")," to SafeHands off-chain, and ask them for the necessary information to include in the instruction. SafeHands answer off-chain with usable information, for instance a JSON like:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ACME": {\n        "from": {\n            "identity": aliceDid,\n            "id": tradingFolio.id.toString(10)\n        }\n    },\n    "DEEPUSD": {\n        "to": safeHandsDid\n    }\n}\n')),(0,i.kt)("p",{parentName:"li"},"When SafeHands simply send their ",(0,i.kt)("inlineCode",{parentName:"p"},"safeHandsDid"),", it means that the DEEPUSD tokens will be received in SafeHands' default portfolio;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"NextDaq send ",(0,i.kt)("inlineCode",{parentName:"p"},"bobOrderId")," to OnTrust off-chain, and ask them for the necessary information to include in the instruction. OnTrust answer off-chain with usable information, for instance:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ACME": {\n        "to": {\n            "identity": bobDid,\n            "id": bobTargetPortfolio.id.toString(10)\n        }\n    },\n    "DEEPUSD": {\n        "from": onTrustDid\n    }\n}\n')))),(0,i.kt)("p",null,"With this information, and after some cross-checking, NextDaq is able to understand that the instruction legs are going to be as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'const legs = [\n    {\n        "asset": "ACME",\n        "amount": new BigNumber("200"),\n        "from": {\n            // This is the view from SafeHands. What NextDaq see is a string like "0x55678..."\n            "identity": aliceDid,\n            // This is the view from SafeHands. What NextDaq see is a string like "1"\n            "id": tradingFolio.id.toString(10)\n        },\n        "to": {\n            // This is the view from OnTrust. What NextDaq see is a string like "0x39987..."\n            "identity": bobDid,\n            // This is the view from OnTrust. What NextDaq see is a string like "2"\n            "id": bobTargetPortfolio.id.toString(10)\n        }\n    },\n    {\n        "asset": "DEEPUSD",\n        "amount": new BigNumber("1000"),\n        // This is the view from OnTrust. What NextDaq see is a string like "0x11907..."\n        "from": onTrustDid,\n        // This is the view from SafeHands. What NextDaq see is a string like "0x26061..."\n        "to": safeHandsDid\n    }\n];\n')),(0,i.kt)("h2",{id:"nextdaq-create-the-instruction"},"NextDaq create the instruction"),(0,i.kt)("p",null,"For the purpose of this exercise we assume that Alice and Bob are not customers of the same broker. If they actually were, it would be simpler as NextDaq could notify SafeHands that they should handle it on their own. SafeHands would just create a portfolio-to-portfolio move transaction and voila. It could even be the case that SafeHands would have identified the match on their own, modified the first standing order, and handled both of them internally even before NextDaq saw the matching order."),(0,i.kt)("p",null,"Back to Alice and Bob working with ",(0,i.kt)("strong",{parentName:"p"},"different brokers"),". Let's reasonably assume that NextDaq has already created a venue where it sends all trade instructions: ",(0,i.kt)("inlineCode",{parentName:"p"},"tradeVenue"),"."),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const tradeInstructionQueue: TransactionQueue<Instruction> =\n  await tradeVenue.addInstruction({\n    legs: legs,\n  });\nconst tradeInstruction: Instruction = await tradeInstructionQueue.run();\nconst tradeInstructionId: string = tradeInstruction.id.toString(10);\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const tradeInstructionQueue = await tradeVenue.addInstruction({\n  legs: legs,\n});\nconst tradeInstruction = await tradeInstructionQueue.run();\nconst tradeInstructionId = tradeInstruction.id.toString(10);\n")))),(0,i.kt)("p",null,"Now NextDaq can turn back to SafeHands with what they need to accept:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "orderId": aliceOrderId,\n    "tradeId": tradeInstructionId\n}\n')),(0,i.kt)("p",null,"And similarly to OnTrust with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "orderId": bobOrderId,\n    "tradeId": tradeInstructionId\n}\n')),(0,i.kt)("p",null,"The instruction is out, the brokers have been informed. The onus is now on the brokers/custodians to affirm it. Additionally, NextDaq, with a view to monitoring the reliability of their brokers on the trading platform, stores ",(0,i.kt)("inlineCode",{parentName:"p"},"tradeInstructionId")," so that it can later confirm that it has been executed."),(0,i.kt)("h2",{id:"the-custodians-approve"},"The custodians approve"),(0,i.kt)("p",null,"Let's look at what it would look like from SafeHands point of view. Because Alice is not their only client, they would likely see a lot of activity, so, although they have a certain level of trust about ",(0,i.kt)("inlineCode",{parentName:"p"},"tradeVenue"),", they need to make sure that there is no spam or fraud going on. They have already instantiated ",(0,i.kt)("inlineCode",{parentName:"p"},"tradeVenue")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"apiSafeHands"),", as a matter of course."),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const instructions: Instruction[] = await tradeVenue.getInstructions();\nconst aliceInstruction: Instruction = instructions.pending.find(\n  (instruction: Instruction) => {\n    return instruction.id.isEqualTo(new BigNumber(tradeInstructionId));\n  }\n);\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const instructions = await tradeVenue.getInstructions();\nconst aliceInstruction = instructions.pending.find(\n  (instruction: Instruction) => {\n    return instruction.id.isEqualTo(new BigNumber(tradeInstructionId));\n  }\n);\n")))),(0,i.kt)("p",null,"Let's wave our hands at how SafeHands has an internal system, ",(0,i.kt)("inlineCode",{parentName:"p"},"getPlacedOrder()")," that keeps track of the orders they opened with NextDaq. They have this so they can cross-check when faced with a pending instruction."),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const aliceOrder: SafeOrder = getPlacedOrder(aliceOrderId);\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const aliceOrder = getPlacedOrder(aliceOrderId);\n")))),(0,i.kt)("p",null,"It returns previously-known information about ",(0,i.kt)("inlineCode",{parentName:"p"},"aliceOrderId")," in the shape of:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "asset": "ACME",\n    "amount": new BigNumber("1000"),\n    "from": {\n        "identity": aliceDid,\n        "id": tradingFolio.id\n    },\n    "to": {\n        "identity": safeHandsDid,\n        "id": null\n    },\n    "price": {\n        "asset": "DEEPUSD",\n        "amount": new BigNumber("5")\n    }\n}\n')),(0,i.kt)("p",null,"Now, SafeHands needs to live up to their name and only affirm the instruction if it is one they recognise. Polymesh, at the API level, allows one to affirm a single leg for a single portfolio. However the SDK finds the relevant legs and portfolios for you, and in turn adds all the necessary affirmations in the transaction queue. The flip side of this convenience is that SafeHands therefore have to make sure nothing untoward was slipped in."),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const legs: ResultSet<Leg> = await aliceInstruction.getLegs();\n\n// Is the instruction's shape as expected?\nassert(legs.count === 2);\n\nconst aliceLegs: Leg[] = legs.data.filter((leg: Leg) => {\n  return (\n    leg.from.did === aliceOrder.from.identity &&\n    leg.from.id.isEqualTo(aliceOrder.from.id) &&\n    leg.asset.ticker === aliceOrder.asset &&\n    leg.amount.isLessThanOrEqualTo(aliceOrder.amount)\n  );\n});\n// Is it even about Alice's shares?\nassert(aliceLegs.length === 1);\nconst soldAmount: BigNumber = aliceLegs[0].amount;\nconst expectedUsd: BigNumber = soldAmount.multipliedBy(aliceOrder.price.amount);\n\nconst paymentLegs: Leg[] = legs.data.filter((leg: Leg) => {\n  return (\n    leg.to.did === aliceOrder.to.identity &&\n    leg.to.id.isEqualTo(aliceOrder.to.id) &&\n    leg.asset.ticker === aliceOrder.price.asset &&\n    leg.amount.isMoreThanEqualTo(expectedUsd)\n  );\n});\n// Are we getting paid in our default portfolio?\nassert(payment.length === 1);\n\nconst paymentLeg: Leg = paymentLegs[0];\nconst payerFolio: Portfolio = new Portfolio({\n  did: paymentLeg.from.did,\n  id: paymentLeg.from.id,\n});\nconst payerCustodian: Identity = await payerFolio.getCustodian();\n// Is someone trying to pay us with our own money?\n// Or with money from one of our clients?\nif (\n  paymentLeg.from.did === safeHandsDid ||\n  payerCustodian.did === safeHandsDid\n) {\n  const rejectQueue: TransactionQueue<Instruction> =\n    await aliceInstruction.reject();\n  await rejectQueue.run();\n  // TODO keep a trace of this attempted fraud in a reputation system.\n} else {\n  const acceptQueue: TransactionQueue<Instruction> =\n    await aliceInstruction.affirm();\n  await acceptQueue.run();\n}\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const legs = await aliceInstruction.getLegs();\n\n// Is the instruction's shape as expected?\nassert(legs.count === 2);\n\nconst aliceLegs = legs.data.filter((leg) => {\n  return (\n    leg.from.did === aliceOrder.from.identity &&\n    leg.from.id.isEqualTo(aliceOrder.from.id) &&\n    leg.asset.ticker === aliceOrder.asset &&\n    leg.amount.isLessThanOrEqualTo(aliceOrder.amount)\n  );\n});\n// Is it even about Alice's shares?\nassert(aliceLegs.length === 1);\nconst soldAmount = aliceLegs[0].amount;\nconst expectedUsd = soldAmount.multipliedBy(aliceOrder.price.amount);\n\nconst paymentLegs = legs.data.filter((leg) => {\n  return (\n    leg.to.did === aliceOrder.to.identity &&\n    leg.to.id.isEqualTo(aliceOrder.to.id) &&\n    leg.asset.ticker === aliceOrder.price.asset &&\n    leg.amount.isMoreThanEqualTo(expectedUsd)\n  );\n});\n// Are we getting paid in our default portfolio?\nassert(payment.length === 1);\n\nconst paymentLeg = paymentLegs[0];\nconst payerFolio = new Portfolio({\n  did: paymentLeg.from.did,\n  id: paymentLeg.from.id,\n});\nconst payerCustodian = await payerFolio.getCustodian();\n// Is someone trying to pay us with our own money?\n// Or with money from one of our clients?\nif (\n  paymentLeg.from.did === safeHandsDid ||\n  payerCustodian.did === safeHandsDid\n) {\n  const rejectQueue = await aliceInstruction.reject();\n  await rejectQueue.run();\n  // TODO keep a trace of this attempted fraud in a reputation system.\n} else {\n  const acceptQueue = await aliceInstruction.affirm();\n  await acceptQueue.run();\n}\n")))),(0,i.kt)("p",null,"As you have noticed, the code above acts suspicious about the instruction it is asked to affirm. In particular, it doesn't allow the ACME buyer to be in a custodial relationship with SafeHands. This is justified in our example by the presumption that an internal trade match would be handled internally. On the other hand, if you want to handle such cases coming from the exchange, then you would need to relax this specific requirement."),(0,i.kt)("p",null,"In parallel to SafeHands, OnTrust has to do the same. And provided KYC considerations are satisfied, the trade goes through. So we are done with the trade. But are we done with the exercise?"),(0,i.kt)("h2",{id:"the-instruction-is-executed"},"The instruction is executed"),(0,i.kt)("p",null,"The instruction has been affirmed, but it is possible that it has not been executed yet because of missing compliance from one or more of the parties. Let's assume that the transaction was left pending and is now ready to be executed again, and that it is SafeHands who have decided to post this transaction."),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"assert(await aliceInstruction.isPending());\nconst updatedInstructionQueue: TransactionQueue<Instruction> =\n  await aliceInstruction.reschedule();\nawait updatedInstructionQueue.run();\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"assert(await aliceInstruction.isPending());\nconst updatedInstructionQueue = await aliceInstruction.reschedule();\nawait updatedInstructionQueue.run();\n")))),(0,i.kt)("p",null,"With that, the system will reevaluate whether it can execute the instruction, and:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if yes, will execute it,"),(0,i.kt)("li",{parentName:"ul"},"if not, will send it back to a pending state.")),(0,i.kt)("h2",{id:"the-exchange-verifies"},"The exchange verifies"),(0,i.kt)("p",null,"NextDaq trust the brokers to do the deed, but they also verify ",(0,i.kt)("strong",{parentName:"p"},"at the end of the day")," that the brokers actually did it. NextDaq run a business partly based on the reputation that trades matched on their platform get eventually settled. Let see what they can do about it."),(0,i.kt)("p",null,"They will collect affirmations on instructions they created. When they collect the affirmations, they always get all of them. Indeed, affirmations start their lifecycle as pending, and their status changes depending on the relevant identity's actions."),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'\n\nconst instructions: Instruction[] = await tradeVenue.getInstructions();\nconst earlierInstruction: Instruction = instructions.pending.find((instruction: Instruction) => {\n    return instruction.id.isEqualTo(new BigNumber(tradeInstructionId));\n});\nif (typeof earlierInstruction === "undefined") {\n    return; // All good\n}\n\nconst affirmations: ResultSet\u2039InstructionAffirmation\u203a = await earlierInstruction.getAffirmations();\n// Discarding ResultSet\'s pagination to simplify.\nconst safeHandsAffirmations: InstructionAffirmation[] = affirmations.data.filter((affirmation: InstructionAffirmation) => {\n    return affirmation.identity.did === safeHandsDid;\n});\nconst onTrustAffirmations: InstructionAffirmation[] = affirmations.data.filter((affirmation: InstructionAffirmation) => {\n    return affirmation.identity.did === onTrustDid;\n});\nsafeHandsAffirmed: boolean = safeHandsAffirmations.every((safeHandsAffirmation: InstructionAffirmation) => {\n    if (safeHandsAffirmation.status === AffirmationStatus.Affirmed) {\n        return true;\n    } else if (safeHandsAffirmation.status === AffirmationStatus.Pending) {\n        // Count 1 strike for SafeHands.\n    } else if (safeHandsAffirmation.status === AffirmationStatus.Rejected) {\n        // Mmh, what could this mean?\n    } else if (safeHandsAffirmation.status === AffirmationStatus.Unknown) {\n        // Status is unknown. What to do?\n    }\n    return false;\n});\n\nonTrustAffirmed: boolean = onTrustAffirmations.every((onTrustAffirmation: InstructionAffirmation) => {\n    if (onTrustAffirmation.status === AffirmationStatus.Affirmed) {\n        return true;\n    } else if (onTrustAffirmation.status === AffirmationStatus.Pending) {\n        // Count 1 strike for OnTrust.\n    } else if (onTrustAffirmation.status === AffirmationStatus.Rejected) {\n        // Mmh, what could this mean?\n    } else if (onTrustAffirmation.status === AffirmationStatus.Unknown) {\n        // Status is unknown. What to do?\n    }\n    return false;\n});\n\nif (safeHandsAffirmed && onTrustAffirmed) {\n    // Do we have a situation with compliance? And how should NextDaq record this failure?\n    // Should NextDaq trigger an execution, and charge back the custodians?\n    await (await earlierInstruction.reschedule()).run();\n}\n'))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const instructions = await tradeVenue.getInstructions();\nconst earlierInstruction = instructions.pending.find(\n  (instruction: Instruction) => {\n    return instruction.id.isEqualTo(new BigNumber(tradeInstructionId));\n  }\n);\nif (typeof earlierInstruction === 'undefined') {\n  return; // All good\n}\n\nconst affirmations = await earlierInstruction.getAffirmations();\n// Discarding ResultSet's pagination to simplify.\nconst safeHandsAffirmations = affirmations.data.filter((affirmation) => {\n  return affirmation.identity.did === safeHandsDid;\n});\nconst onTrustAffirmations = affirmations.data.filter((affirmation) => {\n  return affirmation.identity.did === onTrustDid;\n});\nsafeHandsAffirmed = safeHandsAffirmations.every((safeHandsAffirmation) => {\n  if (safeHandsAffirmation.status === 'Affirmed') {\n    return true;\n  } else if (safeHandsAffirmation.status === 'Pending') {\n    // Count 1 strike for SafeHands.\n  } else if (safeHandsAffirmation.status === 'Rejected') {\n    // Mmh, what could this mean?\n  } else if (safeHandsAffirmation.status === 'Unknown') {\n    // Status is unknown. What to do?\n  }\n  return false;\n});\n\nonTrustAffirmed = onTrustAffirmations.every((onTrustAffirmation) => {\n  if (onTrustAffirmation.status === 'Affirmed') {\n    return true;\n  } else if (onTrustAffirmation.status === 'Pending') {\n    // Count 1 strike for OnTrust.\n  } else if (onTrustAffirmation.status === 'Rejected') {\n    // Mmh, what could this mean?\n  } else if (onTrustAffirmation.status === 'Unknown') {\n    // Status is unknown. What to do?\n  }\n  return false;\n});\n\nif (safeHandsAffirmed && onTrustAffirmed) {\n  // Do we have a situation with compliance? And how should NextDaq record this failure?\n  // Should NextDaq trigger an execution, and charge back the custodians?\n  await (await earlierInstruction.reschedule()).run();\n}\n")))),(0,i.kt)("h2",{id:"custodians-risk"},"Custodian's risk"),(0,i.kt)("p",null,"Let's look back at the relationship between Alice and SafeHands. She puts her shares meant for trading in her ",(0,i.kt)("em",{parentName:"p"},"trading")," portfolio, with SafeHands as the custodian. This means that both Alice and SafeHands can move these shares out of the portfolio to anywhere else. We presume that Alice and SafeHands have entered into a legal contract where they agreed not to pull the rug on each other. In particular, that Alice would not move a single one of her 1,000 shares, while all 1,000 of them are listed on an exchange under the name of SafeHands. Otherwise that would expose SafeHands to a reputation risk, if it were not able to settle an agreed trade."),(0,i.kt)("p",null,"On top of trusting Alice via a legal agreement, SafeHands can also verify, and monitor the transactions on the blockchain. If they simply look at the current balance after it has been done to adjust accordingly, it is about:"),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const alice: Identity = apiSafeHands.getIdentity(aliceDid);\nconst tradingFolio: NumberedPortfolio = await alice.portfolios.getPortfolio({\n  portfolioId: tradingFolio.id,\n});\nconst acmeAssetBalances: PortfolioBalance[] =\n  await tradingFolio.getAssetBalances({\n    assets: ['ACME'],\n  });\nconst acmeAssetBalance: PortfolioBalance = acmeAssetBalances[0];\n\nif (acmeAssetBalance.total.isLessThan(new BigNumber('1000'))) {\n  // TODO update the order on NextDaq accordingly.\n}\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const alice = apiSafeHands.getIdentity(aliceDid);\nconst tradingFolio = await alice.portfolios.getPortfolio({\n  portfolioId: tradingFolio.id,\n});\nconst acmeAssetBalances = await tradingFolio.getAssetBalances({\n  assets: ['ACME'],\n});\nconst acmeAssetBalance = acmeAssetBalances[0];\n\nif (acmeAssetBalance.total.isLessThan(new BigNumber('1000'))) {\n  // TODO update the order on NextDaq accordingly.\n}\n")))),(0,i.kt)("p",null,"On the other hand, if they want to pre-emptively change the order on NextDaq as soon as a conflicting pending instruction pops up, they have to go differently. There is an added difficulty around the fact that ",(0,i.kt)("inlineCode",{parentName:"p"},".getLegs")," is an ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," function, but ",(0,i.kt)("inlineCode",{parentName:"p"},".filter")," doesn't take ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," predicates. So we use an array of promises that yields an array of array, which can be flattened."),(0,i.kt)(c,{groupId:"code-language",mdxType:"Tabs"},(0,i.kt)(p,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const instructions: Instruction[] = await alice.getInstructions();\nconst fromTradingPromises: Promise<Leg[]>[] = instructions.pending.map(\n  async (instruction: Instruction) => {\n    const legs: ResultSet<Leg> = await instruction.getLegs();\n    const outLegs: Leg[] = legs.data.filter((leg: Leg) => {\n      return (\n        leg.from.owner.did === aliceDid &&\n        typeof leg.from.id !== 'undefined' &&\n        leg.from.id.isEqualTo(tradingFolio.id)\n      );\n    });\n    return outLegs;\n  }\n);\nconst pendingOutLegs: Leg[] = (await Promise.all(fromTradingPromises)).flat();\nconst outAmount: BigNumber = pendingOutLegs.reduce(\n  (amount: BigNumber, leg: Leg) => {\n    return amount.plus(leg.amount);\n  },\n  new BigNumber('0')\n);\nif (outAmount.isGreaterThan(new BigNumber('0'))) {\n  // TODO update the order on NextDaq accordingly.\n}\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const instructions = await alice.getInstructions();\nconst fromTradingPromises = instructions.pending.map(async (instruction) => {\n  const legs = await instruction.getLegs();\n  const outLegs = legs.data.filter((leg) => {\n    return (\n      leg.from.owner.did === aliceDid &&\n      typeof leg.from.id !== 'undefined' &&\n      leg.from.id.isEqualTo(tradingFolio.id)\n    );\n  });\n  return outLegs;\n});\nconst pendingOutLegs = (await Promise.all(fromTradingPromises)).flat();\nconst outAmount = pendingOutLegs.reduce((amount, leg) => {\n  return amount.plus(leg.amount);\n}, new BigNumber('0'));\nif (outAmount.isGreaterThan(new BigNumber('0'))) {\n  // TODO update the order on NextDaq accordingly.\n}\n")))),(0,i.kt)("p",null,"At this point, depending on the relationship, SafeHands, can decide to update or pull the sell order on the exchange to reflect the future amount. They could also deem the instruction fraudulent and reject it."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"We have seen how custodians, beneficiaries and an exchange can interact and transact while checking their steps along the way."))}f.isMDXComponent=!0}}]);