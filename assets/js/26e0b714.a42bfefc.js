"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[12342],{11470:(e,n,i)=>{i.d(n,{A:()=>w});var s=i(96540),t=i(34164),r=i(23104),a=i(56347),l=i(205),o=i(57485),c=i(31682),d=i(70679);function g(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:i}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return g(e).map((({props:{value:e,label:n,attributes:i,default:s}})=>({value:e,label:n,attributes:i,default:s})))}(i);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function u({value:e,tabValues:n}){return n.some((n=>n.value===e))}function p({queryString:e=!1,groupId:n}){const i=(0,a.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(t),(0,s.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(i.location.search);n.set(t,e),i.replace({...i.location,search:n.toString()})}),[t,i])]}function x(e){const{defaultValue:n,queryString:i=!1,groupId:t}=e,r=h(e),[a,o]=(0,s.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[c,g]=p({queryString:i,groupId:t}),[x,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[i,t]=(0,d.Dv)(n);return[i,(0,s.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:t}),j=(()=>{const e=c??x;return u({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{j&&o(j)}),[j]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),g(e),m(e)}),[g,m,r]),tabValues:r}}var m=i(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=i(74848);function f({className:e,block:n,selectedValue:i,selectValue:s,tabValues:a}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),r=a[t].value;r!==i&&(o(n),s(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=l.indexOf(e.currentTarget)+1;n=l[i]??l[0];break}case"ArrowLeft":{const i=l.indexOf(e.currentTarget)-1;n=l[i]??l[l.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:a.map((({value:e,label:n,attributes:s})=>(0,y.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...s,className:(0,t.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":i===e}),children:n??e},e)))})}function v({lazy:e,children:n,selectedValue:i}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=x(e);return(0,y.jsxs)("div",{className:(0,t.A)("tabs-container",j.tabList),children:[(0,y.jsx)(f,{...n,...e}),(0,y.jsx)(v,{...n,...e})]})}function w(e){const n=(0,m.A)();return(0,y.jsx)(b,{...e,children:g(e.children)},String(n))}},19365:(e,n,i)=>{i.d(n,{A:()=>a});i(96540);var s=i(34164);const t={tabItem:"tabItem_Ymn6"};var r=i(74848);function a({children:e,hidden:n,className:i}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,i),hidden:n,children:e})}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},92746:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"developer-resources/tooling/sdk/signing-managers","title":"Signing Managers","description":"Securely manage keys and sign transactions with Polymesh SDK Signing Managers","source":"@site/docs/300-developer-resources/010-tooling/10-sdk/020-signing.mdx","sourceDirName":"300-developer-resources/010-tooling/10-sdk","slug":"/development/tooling/sdk/signing","permalink":"/polymesh-documentation-site/development/tooling/sdk/signing","draft":false,"unlisted":false,"editUrl":"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/300-developer-resources/010-tooling/10-sdk/020-signing.mdx","tags":[{"inline":true,"label":"sdk","permalink":"/polymesh-documentation-site/tags/sdk"},{"inline":true,"label":"signing","permalink":"/polymesh-documentation-site/tags/signing"},{"inline":true,"label":"keys","permalink":"/polymesh-documentation-site/tags/keys"},{"inline":true,"label":"security","permalink":"/polymesh-documentation-site/tags/security"},{"inline":true,"label":"signing manager","permalink":"/polymesh-documentation-site/tags/signing-manager"}],"version":"current","sidebarPosition":20,"frontMatter":{"title":"Signing Managers","description":"Securely manage keys and sign transactions with Polymesh SDK Signing Managers","id":"signing-managers","slug":"/development/tooling/sdk/signing","sidebar_label":"Signing Managers","tags":["sdk","signing","keys","security","signing manager"]},"sidebar":"docs","previous":{"title":"Polymesh Types","permalink":"/polymesh-documentation-site/development/tooling/sdk/types"},"next":{"title":"Chain Event Subscription (@polkadot/api)","permalink":"/polymesh-documentation-site/development/tooling/sdk/polkadot-api-events"}}');var t=i(74848),r=i(28453);i(11470),i(19365);const a={title:"Signing Managers",description:"Securely manage keys and sign transactions with Polymesh SDK Signing Managers",id:"signing-managers",slug:"/development/tooling/sdk/signing",sidebar_label:"Signing Managers",tags:["sdk","signing","keys","security","signing manager"]},l=void 0,o={},c=[{value:"Overview",id:"overview",level:2},{value:"Why Signing Managers?",id:"why-signing-managers",level:2},{value:"How They Work",id:"how-they-work",level:2},{value:"Available Signing Managers",id:"available-signing-managers",level:2},{value:"1. Local Signing Manager",id:"1-local-signing-manager",level:3},{value:"2. Browser Extension Signing Manager",id:"2-browser-extension-signing-manager",level:3},{value:"3. HashiCorp Vault Signing Manager",id:"3-hashicorp-vault-signing-manager",level:3},{value:"4. Azure Signing Manager",id:"4-azure-signing-manager",level:3},{value:"5. Fireblocks Signing Manager",id:"5-fireblocks-signing-manager",level:3},{value:"6. Approval Signing Manager",id:"6-approval-signing-manager",level:3},{value:"7. WalletConnect Signing Manager",id:"7-walletconnect-signing-manager",level:3},{value:"Choosing the Right Manager",id:"choosing-the-right-manager",level:2},{value:"Basic Usage Example",id:"basic-usage-example",level:2},{value:"Local Signing Manager (Development)",id:"local-signing-manager-development",level:3},{value:"Offline Signing",id:"offline-signing",level:2},{value:"Security Considerations",id:"security-considerations",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Signing Managers are a crucial component of the Polymesh SDK, designed to abstract the complexities of cryptographic key management and transaction signing. They provide a flexible and secure way for applications to authorize transactions on the Polymesh blockchain without needing to handle private keys directly within the main application logic."}),"\n",(0,t.jsx)(n.h2,{id:"why-signing-managers",children:"Why Signing Managers?"}),"\n",(0,t.jsx)(n.p,{children:"Polymesh is built for regulated assets, demanding high standards of security and compliance. Signing Managers address several key challenges:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," They decouple sensitive key material and signing operations from the application core. This allows keys to be stored securely (e.g., in Hardware Security Modules (HSMs), dedicated key management services like HashiCorp Vault or Azure Key Vault, or browser extensions) instead of being hardcoded or stored insecurely within the application."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibility:"})," Applications can easily switch between different key management solutions (local development keys, browser wallets, enterprise-grade vaults) simply by configuring the appropriate Signing Manager, often with minimal code changes in the application itself."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Institutional Workflows:"})," Enterprises often have strict policies around key management and transaction authorization. Signing Managers facilitate integration with these existing systems and workflows (e.g., requiring multiple approvals via the Approval Signing Manager)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compliance & Auditability:"})," Using specialized signing solutions (like HSMs via Fireblocks or Vault) can help meet regulatory requirements and provide clearer audit trails for transaction signing."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-they-work",children:"How They Work"}),"\n",(0,t.jsx)(n.p,{children:"Conceptually, the SDK follows these steps when a transaction needs signing:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prepare Payload:"}),' The SDK constructs the transaction data (the "payload") that needs to be signed.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Delegate Signing:"})," It passes this payload to the configured Signing Manager instance."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Obtain Signature:"})," The Signing Manager interacts with its underlying key storage (memory, browser extension, Vault, HSM, etc.) to perform the cryptographic signing operation using the appropriate private key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Return Signature:"})," The Signing Manager returns the generated signature to the SDK."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Submit Transaction:"})," The SDK combines the original payload and the signature to form a valid, signed transaction and submits it to the Polymesh node."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This pluggable architecture allows developers to choose the key management solution that best fits their security requirements and operating environment."}),"\n",(0,t.jsx)(n.h2,{id:"available-signing-managers",children:"Available Signing Managers"}),"\n",(0,t.jsx)(n.p,{children:"Polymesh provides several official Signing Manager implementations:"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"1-local-signing-manager",children:"1. Local Signing Manager"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Package:"})," ",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/local-signing-manager",children:(0,t.jsx)(n.code,{children:"@polymeshassociation/local-signing-manager"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Case:"})," Primarily for ",(0,t.jsx)(n.strong,{children:"development, testing, and simple scripts"}),". Ideal for getting started quickly and running examples."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mechanism:"})," Stores BIP39 mnemonics or raw private keys ",(0,t.jsx)(n.strong,{children:"directly in memory"})," within the running application."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," ",(0,t.jsx)(n.strong,{children:"Low."})," Keys are exposed in the application's memory. ",(0,t.jsx)(n.strong,{children:"Not suitable for production environments or managing real assets."})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment:"})," Node.js"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"2-browser-extension-signing-manager",children:"2. Browser Extension Signing Manager"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Package:"})," ",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/browser-extension-signing-manager",children:(0,t.jsx)(n.code,{children:"@polymeshassociation/browser-extension-signing-manager"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Case:"})," For building ",(0,t.jsx)(n.strong,{children:"web-based dApps"})," that interact with users' Polymesh Wallet browser extensions (or other compatible extensions like SubWallet, Talisman)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mechanism:"})," Communicates with the browser extension via injected scripts. The extension manages the keys and prompts the user for authorization and signing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," ",(0,t.jsx)(n.strong,{children:"Medium-High."})," Keys remain within the user's secure browser extension environment. Relies on the security of the user's extension and device."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment:"})," Browser"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"3-hashicorp-vault-signing-manager",children:"3. HashiCorp Vault Signing Manager"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Package:"})," ",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/hashicorp-vault-signing-manager",children:(0,t.jsx)(n.code,{children:"@polymeshassociation/hashicorp-vault-signing-manager"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Case:"})," For ",(0,t.jsx)(n.strong,{children:"server-side applications and enterprise environments"})," requiring secure, centralized key management using ",(0,t.jsx)(n.a,{href:"https://www.vaultproject.io/",children:"HashiCorp Vault"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mechanism:"})," Interacts with a Vault instance via its API. Leverages Vault's ",(0,t.jsx)(n.code,{children:"transit"})," secrets engine to perform signing operations without exposing private keys outside Vault."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," ",(0,t.jsx)(n.strong,{children:"High."})," Keys are managed within Vault's secure and auditable environment. Supports HSM integration via Vault Enterprise."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment:"})," Node.js"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"4-azure-signing-manager",children:"4. Azure Signing Manager"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Package:"})," ",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/azure-signing-manager",children:(0,t.jsx)(n.code,{children:"@polymeshassociation/azure-signing-manager"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Case:"})," For ",(0,t.jsx)(n.strong,{children:"server-side applications and enterprise environments"})," leveraging Microsoft Azure Key Vault for key management."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mechanism:"})," Interacts with Azure Key Vault API to perform signing operations using keys stored within the vault."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," ",(0,t.jsx)(n.strong,{children:"High."})," Keys are managed within Azure's secure cloud infrastructure."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment:"})," Node.js"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"5-fireblocks-signing-manager",children:"5. Fireblocks Signing Manager"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Package:"})," ",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/fireblocks-signing-manager",children:(0,t.jsx)(n.code,{children:"@polymeshassociation/fireblocks-signing-manager"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Case:"})," For ",(0,t.jsx)(n.strong,{children:"institutions using the Fireblocks platform"})," for digital asset custody and key management."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mechanism:"})," Integrates with the Fireblocks API and MPC (Multi-Party Computation) signing process."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," ",(0,t.jsx)(n.strong,{children:"Very High."})," Leverages Fireblocks' MPC technology and institutional-grade security infrastructure."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment:"})," Node.js"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"6-approval-signing-manager",children:"6. Approval Signing Manager"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Package:"})," ",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/approval-signing-manager",children:(0,t.jsx)(n.code,{children:"@polymeshAssociation/approval-signing-manager"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Case:"})," Facilitating ",(0,t.jsx)(n.strong,{children:"workflows requiring explicit approval"})," before a transaction is signed. Useful for internal controls or integrating human approval steps."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mechanism:"})," Acts as a wrapper around another Signing Manager. It intercepts signing requests, triggers an approval workflow (which needs to be implemented by the developer, e.g., via UI, email, internal system), and only proceeds with the actual signing (using the wrapped manager) upon receiving approval."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," Depends on the wrapped Signing Manager and the implementation of the approval workflow. Adds a layer of operational control."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment:"})," Node.js"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"7-walletconnect-signing-manager",children:"7. WalletConnect Signing Manager"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Package:"})," ",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/walletconnect-signing-manager",children:(0,t.jsx)(n.code,{children:"@polymeshassociation/walletconnect-signing-manager"})})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Case:"})," Enabling ",(0,t.jsx)(n.strong,{children:"dApps (web or potentially desktop/mobile)"})," to connect and request signatures from ",(0,t.jsx)(n.strong,{children:"mobile wallets"})," supporting WalletConnect v2 and the ",(0,t.jsx)(n.code,{children:"polkadot_signTransaction"})," method on the Polymesh namespace."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mechanism:"})," Uses the WalletConnect v2 protocol to relay signing requests to a compatible mobile wallet. The user approves the transaction on their mobile device."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," ",(0,t.jsx)(n.strong,{children:"Medium-High."})," Keys remain on the user's mobile device within their wallet app. Relies on the security of the mobile wallet and device."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment:"})," Browser, Node.js (depending on WalletConnect client implementation)"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"choosing-the-right-manager",children:"Choosing the Right Manager"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Manager"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Environment"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Use Case"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Security Level"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Key Storage"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.strong,{children:"Local"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Node.js"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Development, Testing, Simple Scripts"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Low"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"In Memory"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.strong,{children:"Browser Extension"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Browser"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Web dApps interacting with user wallets"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Medium-High"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Browser Extension"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.strong,{children:"HashiCorp Vault"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Node.js"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Server-side, Enterprise, Centralized KMS"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"High"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Vault (optional HSM)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.strong,{children:"Azure"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Node.js"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Server-side, Enterprise, Azure Cloud"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"High"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Azure Key Vault"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.strong,{children:"Fireblocks"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Node.js"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Institutional Custody with Fireblocks"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Very High"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Fireblocks MPC"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.strong,{children:"Approval"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Node.js"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Workflows requiring explicit approval steps"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Adds Operational Ctrl"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Wraps another manager"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.strong,{children:"WalletConnect"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Browser/Node.js"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"dApps interacting with mobile wallets"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Medium-High"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Mobile Wallet"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage-example",children:"Basic Usage Example"}),"\n",(0,t.jsx)(n.h3,{id:"local-signing-manager-development",children:"Local Signing Manager (Development)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Polymesh } from '@polymeshassociation/polymesh-sdk';\nimport { LocalSigningManager } from '@polymeshassociation/local-signing-manager';\n\nasync function main() {\n  const signingManager = await LocalSigningManager.create({\n    accounts: [{ mnemonic: '//Alice' }], // WARNING: For dev/test only!\n  });\n\n  const sdk = await Polymesh.connect({\n    nodeUrl: 'wss://your-polymesh-node-url', // Replace with actual node URL\n    signingManager,\n  });\n\n  // Use the SDK...\n  const accounts = await signingManager.getAccounts();\n  const signingAccount = accounts[0];\n  console.log('Signing Account Address:', signingAccount);\n\n  // Example: Get balance\n  const account = await sdk.accountManagement.getAccount({ address: signingAccount });\n  const balance = await account.getBalance();\n  console.log('Balance:', balance.free.toString());\n\n  await sdk.disconnect();\n}\n\nmain().catch(console.error);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"offline-signing",children:"Offline Signing"}),"\n",(0,t.jsxs)(n.p,{children:["For maximum security, especially in air-gapped environments, you might need to sign transactions offline. Signing Managers facilitate the ",(0,t.jsx)(n.em,{children:"first"})," and ",(0,t.jsx)(n.em,{children:"last"})," steps of this process:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Generate Payload:"})," Use the SDK (with any configured Signing Manager, even a temporary local one) to prepare the transaction. Instead of calling ",(0,t.jsx)(n.code,{children:".run()"}),", call the ",(0,t.jsx)(n.code,{children:".toSignablePayload()"})," method on the transaction object. This returns the data that needs to be signed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sign Offline:"})," Transfer this payload securely to your offline signing environment (e.g., air-gapped machine with keys, HSM). Use appropriate tools (like ",(0,t.jsx)(n.code,{children:"polkadot-js/keyring"})," or hardware-specific tools) to sign the ",(0,t.jsx)(n.strong,{children:"raw payload"})," (",(0,t.jsx)(n.code,{children:"payload.rawPayload.data"}),") using the intended private key. Remember to prefix the signature correctly based on the key type (e.g., ",(0,t.jsx)(n.code,{children:"0x00"})," for ed25519, ",(0,t.jsx)(n.code,{children:"0x01"})," for sr25519) if the tool doesn't do it automatically."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Submit Signed Transaction:"})," Bring the generated signature back to an online environment. Use the ",(0,t.jsx)(n.code,{children:"sdk.network.submitTransaction()"})," method, providing the ",(0,t.jsx)(n.em,{children:"original payload"})," (either ",(0,t.jsx)(n.code,{children:"payload.payload"})," for JSON or ",(0,t.jsx)(n.code,{children:"payload.rawPayload"})," for raw) and the hex-encoded ",(0,t.jsx)(n.em,{children:"signature"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"offline-signing-examples"})," repository demonstrates this flow:\n",(0,t.jsx)(n.a,{href:"https://github.com/PolymeshAssociation/offline-signing-examples",children:(0,t.jsx)(n.code,{children:"offline-signing-examples"})})]}),"\n",(0,t.jsxs)(n.p,{children:["Signing Managers are ",(0,t.jsx)(n.strong,{children:"not"})," directly involved in the ",(0,t.jsx)(n.em,{children:"actual offline signing step"})," (step 2), but they are essential for generating the correct payload (step 1) and can be used for submitting the pre-signed transaction (step 3, although ",(0,t.jsx)(n.code,{children:"submitTransaction"})," doesn't strictly require a ",(0,t.jsx)(n.em,{children:"signing"})," manager, just SDK connectivity)."]}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Never expose production private keys or mnemonics"})," in your application code or insecure storage. Use secure Signing Managers like Vault, Azure, Fireblocks, or Browser Extension for production."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Secure API Keys/Tokens:"})," If using Vault, Azure, or Fireblocks, ensure the API credentials used by the Signing Manager are stored and accessed securely (e.g., environment variables, secrets management systems). Grant them least-privilege access."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Local Signing Manager:"})," Only use for development and testing with non-valuable keys."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Approval Signing Manager:"})," The security of the approval workflow itself is critical. Ensure it's robust and cannot be easily bypassed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Regular Audits:"})," Periodically review your key management setup and signing workflows."]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);