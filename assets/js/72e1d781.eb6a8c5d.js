"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[29320],{353:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core-concepts/identity/advanced/child-identities","title":"Child Identities","description":"Create and manage subsidiary identities derived from a parent identity while maintaining independent control and assets","source":"@site/docs/200-core-concepts/030-identity/030-advanced/040-child.md","sourceDirName":"200-core-concepts/030-identity/030-advanced","slug":"/identity/advanced/child","permalink":"/polymesh-documentation-site/identity/advanced/child","draft":false,"unlisted":false,"editUrl":"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/200-core-concepts/030-identity/030-advanced/040-child.md","tags":[{"inline":true,"label":"identity","permalink":"/polymesh-documentation-site/tags/identity"},{"inline":true,"label":"management","permalink":"/polymesh-documentation-site/tags/management"}],"version":"current","sidebarPosition":40,"frontMatter":{"title":"Child Identities","description":"Create and manage subsidiary identities derived from a parent identity while maintaining independent control and assets","id":"child-identities","slug":"/identity/advanced/child","sidebar_label":"Child Identities","tags":["identity","management"]},"sidebar":"docs","previous":{"title":"Authorizations","permalink":"/polymesh-documentation-site/authorizations"},"next":{"title":"Subsidized Accounts","permalink":"/polymesh-documentation-site/accounts/subsidized"}}');var d=n(74848),s=n(28453);const a={title:"Child Identities",description:"Create and manage subsidiary identities derived from a parent identity while maintaining independent control and assets",id:"child-identities",slug:"/identity/advanced/child",sidebar_label:"Child Identities",tags:["identity","management"]},r=void 0,l={},c=[{value:"Overview",id:"overview",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Creation Methods",id:"creation-methods",level:3},{value:"Child Identity Creation from Secondary Key",id:"child-identity-creation-from-secondary-key",level:4},{value:"Child Identity Creation from Unlinked Keys",id:"child-identity-creation-from-unlinked-keys",level:4},{value:"Capabilities and Limitations",id:"capabilities-and-limitations",level:3},{value:"Unlinking Child Identities",id:"unlinking-child-identities",level:2}];function o(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,d.jsx)(i.p,{children:"Child identities facilitate the creation of multiple DIDs on Polymesh by enabling existing users to generate new DIDs derived from a parent identity's CDD claim. An unlimited number of child identities can be created and associated with a parent identity."}),"\n",(0,d.jsx)(i.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,d.jsx)(i.p,{children:"Child identities are useful for various organizational and security needs:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.strong,{children:"Smart Contract Isolation"}),": Create a separate identity for a smart contract to protect user funds managed by the contract, ensuring it operates independently of the deployer's identity."]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.strong,{children:"Enhanced Security Structure"}),': Use child identities as "hot wallets" while retaining the parent identity as a "cold wallet" to secure assets. This structure permits separate identities for hot/cold wallet functions.']}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.strong,{children:"Organizational Hierarchy"}),": Structure an organization through child identities, such as assigning individual identities to different departments or subsidiaries."]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(i.admonition,{type:"info",children:(0,d.jsx)(i.p,{children:"Keys linked to a child identity are fully independent of those of the parent identity; the parent cannot directly access assets held by a child identity."})}),"\n",(0,d.jsx)(i.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,d.jsx)(i.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,d.jsx)(i.p,{children:"To create child identities, you need:"}),"\n",(0,d.jsxs)(i.ol,{children:["\n",(0,d.jsx)(i.li,{children:"A parent identity with a valid CDD claim"}),"\n",(0,d.jsx)(i.li,{children:"Access to the parent identity's primary key"}),"\n",(0,d.jsx)(i.li,{children:"New key pair(s) for the child identity/identities"}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"creation-methods",children:"Creation Methods"}),"\n",(0,d.jsx)(i.p,{children:"There are two methods for creating child identities, each with different requirements and processes:"}),"\n",(0,d.jsx)(i.h4,{id:"child-identity-creation-from-secondary-key",children:"Child Identity Creation from Secondary Key"}),"\n",(0,d.jsxs)(i.p,{children:["Using ",(0,d.jsx)(i.code,{children:"identity::create_child_identity"}),":"]}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["Requires the new child key to already be associated as a ",(0,d.jsx)(i.a,{href:"/identity/advanced/keys",children:"secondary key"})," of the parent identity"]}),"\n",(0,d.jsx)(i.li,{children:"Immediately converts the secondary key into the primary key of the new child identity"}),"\n",(0,d.jsx)(i.li,{children:"No additional authorization step is needed"}),"\n",(0,d.jsx)(i.li,{children:"Direct and immediate creation process"}),"\n"]}),"\n",(0,d.jsx)(i.h4,{id:"child-identity-creation-from-unlinked-keys",children:"Child Identity Creation from Unlinked Keys"}),"\n",(0,d.jsxs)(i.p,{children:["Using ",(0,d.jsx)(i.code,{children:"identity::create_child_identities"}),":"]}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Can create multiple child identities in one transaction"}),"\n",(0,d.jsxs)(i.li,{children:["Each child identity creation requires:","\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"The unassigned key to be used as the primary key"}),"\n",(0,d.jsx)(i.li,{children:"An off-chain authorization signature from that key"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["The authorization signature must be generated by the future child key signing data containing:","\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"The target Identity's DID (future parent)"}),"\n",(0,d.jsxs)(i.li,{children:["The parent identity's off-chain authorization nonce (retrieved via ",(0,d.jsx)(i.code,{children:"identity::offchain_authorization_nonce"}),")"]}),"\n",(0,d.jsx)(i.li,{children:"An expiry date for the authorization"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"This method enables bulk creation of child identities without first linking the keys to the parent identity."}),"\n",(0,d.jsx)(i.admonition,{type:"info",children:(0,d.jsx)(i.p,{children:"Only the primary key of the parent identity can initiate either creation process."})}),"\n",(0,d.jsx)(i.h3,{id:"capabilities-and-limitations",children:"Capabilities and Limitations"}),"\n",(0,d.jsx)(i.p,{children:"Once established, a child identity:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Receives a unique DID"}),"\n",(0,d.jsx)(i.li,{children:"Can hold claims and assets independently"}),"\n",(0,d.jsx)(i.li,{children:"Inherits the parent's CDD status"}),"\n",(0,d.jsx)(i.li,{children:"Can receive additional compliance claims directly"}),"\n",(0,d.jsx)(i.li,{children:"Cannot create its own child identities (no recursive child identities)"}),"\n"]}),"\n",(0,d.jsx)(i.h2,{id:"unlinking-child-identities",children:"Unlinking Child Identities"}),"\n",(0,d.jsx)(i.p,{children:"Child identities can be detached from their parent when needed. This process requires:"}),"\n",(0,d.jsxs)(i.ol,{children:["\n",(0,d.jsxs)(i.li,{children:["Initiation by either:","\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"The parent identity's primary key, or"}),"\n",(0,d.jsx)(i.li,{children:"The child identity's primary key"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["Calling the ",(0,d.jsx)(i.code,{children:"identity::unlink_child_identity"})," extrinsic with the child's DID as an argument"]}),"\n"]}),"\n",(0,d.jsx)(i.admonition,{type:"note",children:(0,d.jsx)(i.p,{children:"After unlinking, the child identity loses its inherited CDD status and must obtain its own CDD claim to continue transacting on the chain."})}),"\n",(0,d.jsxs)(i.p,{children:["Learn more about child identities in our ",(0,d.jsx)(i.a,{href:"https://developers.polymesh.network/sdk-docs/classes/API/Entities/Identity/ChildIdentity/",children:"SDK documentation"}),"."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>r});var t=n(96540);const d={},s=t.createContext(d);function a(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);