"use strict";(self.webpackChunkpolymesh_developer_documentation=self.webpackChunkpolymesh_developer_documentation||[]).push([[79014],{28453:(e,o,t)=>{t.d(o,{R:()=>r,x:()=>a});var i=t(96540);const s={},n=i.createContext(s);function r(e){const o=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(n.Provider,{value:o},e.children)}},47194:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"core-concepts/portfolios/portfolios","title":"Portfolios","description":"Polymesh portfolios let users organize, segregate, and control digital assets with flexible permissions.","source":"@site/docs/200-core-concepts/080-portfolios/index.mdx","sourceDirName":"200-core-concepts/080-portfolios","slug":"/portfolios","permalink":"/polymesh-documentation-site/portfolios","draft":false,"unlisted":false,"editUrl":"https://github.com/PolymeshAssociation/polymesh-documentation-site/edit/develop/docs/200-core-concepts/080-portfolios/index.mdx","tags":[{"inline":true,"label":"portfolios","permalink":"/polymesh-documentation-site/tags/portfolios"},{"inline":true,"label":"custody","permalink":"/polymesh-documentation-site/tags/custody"}],"version":"current","frontMatter":{"title":"Portfolios","description":"Polymesh portfolios let users organize, segregate, and control digital assets with flexible permissions.","id":"portfolios","slug":"/portfolios","sidebar_label":"Portfolios","tags":["portfolios","custody"]},"sidebar":"docs","previous":{"title":"On-Chain Voting","permalink":"/polymesh-documentation-site/corporate-actions/on-chain-voting"},"next":{"title":"Custody Management","permalink":"/polymesh-documentation-site/portfolios/custody"}}');var s=t(74848),n=t(28453);const r={title:"Portfolios",description:"Polymesh portfolios let users organize, segregate, and control digital assets with flexible permissions.",id:"portfolios",slug:"/portfolios",sidebar_label:"Portfolios",tags:["portfolios","custody"]},a=void 0,l={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Features and Use Cases",id:"key-features-and-use-cases",level:2},{value:"Identity, Portfolios, and Assets Diagram",id:"identity-portfolios-and-assets-diagram",level:2},{value:"Managing Portfolios",id:"managing-portfolios",level:2},{value:"The Default Portfolio",id:"the-default-portfolio",level:3},{value:"User Portfolios",id:"user-portfolios",level:3},{value:"Permissions and Access",id:"permissions-and-access",level:3},{value:"Create a Portfolio",id:"create-a-portfolio",level:3},{value:"Rename a Portfolio",id:"rename-a-portfolio",level:3},{value:"Delete a Portfolio",id:"delete-a-portfolio",level:3},{value:"Moving funds between Portfolios",id:"moving-funds-between-portfolios",level:3},{value:"Preapprove receiving an asset in a Portfolio",id:"preapprove-receiving-an-asset-in-a-portfolio",level:3},{value:"Remove pre-approval to a Portfolio",id:"remove-pre-approval-to-a-portfolio",level:3},{value:"Querying Portfolio Information",id:"querying-portfolio-information",level:3}];function c(e){const o={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(o.p,{children:["In Polymesh, all ",(0,s.jsx)(o.a,{href:"/core/assets",children:"assets"})," (excluding the network native token ",(0,s.jsx)(o.a,{href:"/polyx",children:"POLYX"}),") are held at the ",(0,s.jsx)(o.a,{href:"/identity",children:"identity"})," level, or more correctly in Portfolios associated with an identity. This allows Polymesh to enforce ",(0,s.jsx)(o.a,{href:"/compliance",children:"compliance"})," in real time based on claims also held at the identity level."]}),"\n",(0,s.jsx)(o.p,{children:"Portfolios allow users to organize their assets underneath their identity, and to flexibly assign key permissions and custody. A particular asset can have different balances across portfolios within the same identity."}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.a,{href:"/identity/advanced/secondary-keys/#secondary-key-permissions",children:"Permissions"})," for keys can be defined at the portfolio level. Secondary keys are managed at the identity level by the ",(0,s.jsx)(o.a,{href:"/identity/advanced/primary-keys/",children:"Primary key"}),", and can be granted access to specific portfolios, no portfolios or all portfolios controlled by an identity. This ensures that only authorized keys or can transact with assets in those portfolios."]}),"\n",(0,s.jsx)(o.admonition,{type:"note",children:(0,s.jsxs)(o.p,{children:["For more details on portfolio control and custody models, see the ",(0,s.jsx)(o.a,{href:"/portfolios/custody",children:"Custody"})," page."]})}),"\n",(0,s.jsx)(o.h2,{id:"key-features-and-use-cases",children:"Key Features and Use Cases"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Asset Management"}),": Portfolios hold balances of various assets (security tokens, stable coins, etc.) issued on the Polymesh chain."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Key Permissions"}),": Secondary keys can be permissioned to allow them interact with specific portfolios."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Portfolio Control"}),": ",(0,s.jsx)(o.a,{href:"/portfolios/custody",children:"Control/Custody"})," can be granted to other identities, allowing them to act on a portfolio's behalf, such as initiating transfers or moving between portfolios under that identity."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Portfolio Movements"}),": Assets can be transferred between portfolios under the same identity without restrictions, enabling flexible asset management."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Portfolio Transfers"}),": Assets can be transferred between portfolios of different identities, using the ",(0,s.jsx)(o.a,{href:"/settlement",children:"Settlement pallet"})," which enforces compliant transfers."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Multiple Portfolio Management"}),": Users can create, add, remove, or rename portfolios to organize their assets according to different needs or strategies. Each identity has a default portfolio, but additional numbered portfolios can be created for further segregation of assets."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.strong,{children:"Pre-approval for Asset Transfers"}),": Portfolios can be pre-approved to receive specific assets without manual affirmation, streamlining the transfer process for frequently traded assets."]}),"\n"]}),"\n",(0,s.jsx)(o.h2,{id:"identity-portfolios-and-assets-diagram",children:"Identity, Portfolios, and Assets Diagram"}),"\n",(0,s.jsx)(o.p,{children:"This diagram illustrates how a Polymesh identity is structured, showing the relationships between identities, keys, portfolios, and the assets held within those portfolios. It highlights how permissions and custody can be managed at different levels."}),"\n",(0,s.jsx)(o.mermaid,{value:'graph TD\n    style Identities stroke-dasharray: 5 5\n    style Keys stroke-dasharray: 5 5\n    style Portfolios stroke-dasharray: 5 5\n    style Assets stroke-dasharray: 5 5\n\n    subgraph Identities\n        A[Identity: Alice]\n        C[Identity: Bob]\n    end\n\n    subgraph Keys\n        PK["Primary Key (Alice)<br/>Full permissions"]\n        PK2["Primary Key (Bob)<br/>Full permissions"]\n        SK1["Secondary Key 1<br/>Permissions:<br/>Portfolios [Default, P2]<br/>Assets [All]"]\n        SK2["Secondary Key 2<br/>Permissions:<br/>Portfolios [P2]<br/>Assets [AMZ]"]\n    end\n\n    subgraph Portfolios\n        P1["Alice\'s Default Portfolio"]\n        P2["Alice\'s Portfolio 2 (P2)"]\n        P3["Alice\'s Portfolio 3<br/>(Control Assigned)"]\n        P4["Bob\'s Default Portfolio"]\n    end\n\n    subgraph Assets\n        A1[1000 APPL]\n        A2[20 FB]\n        A3[50 AMZ]\n        A4[10 FB]\n        A5[1000 MSFT]\n        A6[100 GOLD]\n    end\n\n    PK2 --\x3e C\n    SK1 --\x3e A\n    PK ---\x3e A\n    SK2 --\x3e A\n    A --\x3e P1\n    A --\x3e P2\n    A --\x3e P3\n    C -.->|"Controlled by Bob"| P3\n    C --\x3eP4\n\n    P1 --\x3e A1\n    P1 --\x3e A2\n    P2 --\x3e A3\n    P2 --\x3e A4\n    P3 --\x3e A5\n    P4 --\x3e A6'}),"\n",(0,s.jsx)(o.h2,{id:"managing-portfolios",children:"Managing Portfolios"}),"\n",(0,s.jsx)(o.h3,{id:"the-default-portfolio",children:"The Default Portfolio"}),"\n",(0,s.jsx)(o.p,{children:"Every Polymesh identity has a default portfolio. When a specific numbered portfolio is not designated, this is where assets are received by default for asset transfers. Functionally this portfolio is the same as any other portfolio, but it is the only one that cannot be deleted or renamed."}),"\n",(0,s.jsx)(o.h3,{id:"user-portfolios",children:"User Portfolios"}),"\n",(0,s.jsx)(o.p,{children:"In addition to the Default portfolio, users can create multiple numbered portfolios that can be uniquely named under a single identity. These are useful for segregating assets, managing permissions, or separating business activities."}),"\n",(0,s.jsx)(o.p,{children:"Users can have as many user portfolios as they like. The ID of user created portfolios increments from 1. User created portfolios can be renamed at any time or deleted if it does not hold any assets."}),"\n",(0,s.jsx)(o.h3,{id:"permissions-and-access",children:"Permissions and Access"}),"\n",(0,s.jsx)(o.p,{children:"Most portfolio management functions must be called by the owner of the portfolio, using either the primary key or a secondary key with the appropriate permissions. If control/custody of a portfolio has been assigned to another identity, only the controlling identity can move assets out of that portfolio."}),"\n",(0,s.jsx)(o.hr,{}),"\n",(0,s.jsx)(o.h3,{id:"create-a-portfolio",children:"Create a Portfolio"}),"\n",(0,s.jsxs)(o.p,{children:["Portfolios can be created by calling ",(0,s.jsx)(o.code,{children:"portfolio::create_portfolio"})," and providing a unique portfolio name as a parameter. If a portfolio is created by a secondary key, it must be given explicit permission for that portfolio to be able to manage the assets within it even if it created it."]}),"\n",(0,s.jsx)(o.h3,{id:"rename-a-portfolio",children:"Rename a Portfolio"}),"\n",(0,s.jsxs)(o.p,{children:["A portfolio can be renamed by calling ",(0,s.jsx)(o.code,{children:"portfolio::rename_portfolio"}),". The default portfolio cannot be renamed."]}),"\n",(0,s.jsx)(o.h3,{id:"delete-a-portfolio",children:"Delete a Portfolio"}),"\n",(0,s.jsxs)(o.p,{children:["Portfolios can be deleted by calling ",(0,s.jsx)(o.code,{children:"portfolio::delete_portfolio"})," and providing the portfolio ID as a parameter. Only empty portfolios can be deleted. The default portfolio cannot be deleted."]}),"\n",(0,s.jsx)(o.h3,{id:"moving-funds-between-portfolios",children:"Moving funds between Portfolios"}),"\n",(0,s.jsxs)(o.p,{children:["Funds can be moved between portfolios by calling ",(0,s.jsx)(o.code,{children:"portfolio::move_portfolio_funds"}),". Transfers between portfolios of the same identity are not subject to compliance restrictions. If the owner has assigned control/custody of the portfolio to another identity, only the controlling identity can move assets out of that portfolio."]}),"\n",(0,s.jsx)(o.p,{children:"Parameters:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"from"}),": The DID and the ID of the sender's portfolio."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"to"}),": The DID and the ID of the receiver's portfolio."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"funds"}),": The type (",(0,s.jsx)(o.code,{children:"Fungible"})," or ",(0,s.jsx)(o.code,{children:"NonFungible"}),"), the asset ID and the amount or NFT IDs of the asset being moved between portfolios."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"memo"}),": A short memo can be added to each token amount moved. This is publicly visible on the chain and can be used to identify the transaction."]}),"\n"]}),"\n",(0,s.jsx)(o.admonition,{type:"info",children:(0,s.jsxs)(o.p,{children:["To move assets between portfolios of different identities, the ",(0,s.jsx)(o.a,{href:"/settlement",children:"Settlement"})," process must be used."]})}),"\n",(0,s.jsx)(o.h3,{id:"preapprove-receiving-an-asset-in-a-portfolio",children:"Preapprove receiving an asset in a Portfolio"}),"\n",(0,s.jsxs)(o.p,{children:["Users can pre-approve receiving an asset in a portfolio by calling ",(0,s.jsx)(o.code,{children:"portfolio::pre_approve_portfolio"}),".\nThis can streamline the ",(0,s.jsx)(o.a,{href:"/settlement",children:"settlement process"})," for certain assets to be transferred into the portfolio without the need for explicit approval of a settlement instruction. This function is useful for assets such as stablecoins, frequently traded assets, or workflows where manual approval for each transfer is not required."]}),"\n",(0,s.jsx)(o.p,{children:"When a portfolio is pre-approved to receive an asset, and a settlement instruction is created involving that combination of asset and portfolio as the receiver, that leg is automatically marked as approved by the receiver without requiring explicit affirmation or approval for each instruction. This can allow an instruction to settle immediately without manual intervention by the receiver or the controller of the portfolio."}),"\n",(0,s.jsx)(o.p,{children:"Parameters:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"asset_id"}),": The asset that will be exempt from affirmation."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"portfolio_id"}),": The ID of the portfolio that can receive the asset without affirmation."]}),"\n"]}),"\n",(0,s.jsx)(o.h3,{id:"remove-pre-approval-to-a-portfolio",children:"Remove pre-approval to a Portfolio"}),"\n",(0,s.jsxs)(o.p,{children:["To revoke or delete a previously granted pre-approval for a portfolio to automatically receive a specific asset, call the ",(0,s.jsx)(o.code,{children:"portfolio::remove_portfolio_pre_approval"})," function."]}),"\n",(0,s.jsx)(o.p,{children:"Parameters:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"asset_id"}),": The asset that will be exempt from affirmation."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"portfolio_id"}),": The portfolio that can receive the asset without affirmation."]}),"\n"]}),"\n",(0,s.jsx)(o.h3,{id:"querying-portfolio-information",children:"Querying Portfolio Information"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"portfolio::allowed_custodians"})," shows the custodians allowed to create and take custody of portfolios on an identity's behalf."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"portfolio::portfolio_asset_balances"})," to query the asset balances of portfolios."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"portfolio::portfolio_asset_count"})," shows how many assets with non-zero balance this portfolio contains."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"portfolio::portfolio_custodian"})," to query the custodian of a particular portfolio."]}),"\n",(0,s.jsxs)(o.li,{children:[(0,s.jsx)(o.code,{children:"portfolio::pre_approved_portfolios"})," to query all portfolios that don't need to affirm the receivement of a given asset."]}),"\n"]})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);